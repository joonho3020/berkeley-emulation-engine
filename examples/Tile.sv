// Generated by CIRCT firtool-1.62.0
module CSR(
  input         clock,
  input         reset,
  input         io_stall,
  input  [2:0]  io_cmd,
  input  [31:0] io_in,
  output [31:0] io_out,
  input  [31:0] io_pc,
  input  [31:0] io_addr,
  input  [31:0] io_inst,
  input         io_illegal,
  input  [1:0]  io_st_type,
  input  [2:0]  io_ld_type,
  input         io_pc_check,
  output        io_expt,
  output [31:0] io_evec,
  output [31:0] io_epc,
  input         io_host_fromhost_valid,
  input  [31:0] io_host_fromhost_bits,
  output [31:0] io_host_tohost
);

  reg  [31:0] time_0;
  reg  [31:0] timeh;
  reg  [31:0] cycle;
  reg  [31:0] cycleh;
  reg  [31:0] instret;
  reg  [31:0] instreth;
  reg  [1:0]  PRV;
  reg  [1:0]  PRV1;
  reg         IE;
  reg         IE1;
  reg         MTIP;
  reg         MTIE;
  reg         MSIP;
  reg         MSIE;
  reg  [31:0] mtimecmp;
  reg  [31:0] mscratch;
  reg  [31:0] mepc;
  reg  [31:0] mcause;
  reg  [31:0] mbadaddr;
  reg  [31:0] mtohost;
  reg  [31:0] mfromhost;
  wire [31:0] io_out_0 =
    io_inst[31:20] == 12'hC00
      ? cycle
      : io_inst[31:20] == 12'hC01
          ? time_0
          : io_inst[31:20] == 12'hC02
              ? instret
              : io_inst[31:20] == 12'hC80
                  ? cycleh
                  : io_inst[31:20] == 12'hC81
                      ? timeh
                      : io_inst[31:20] == 12'hC82
                          ? instreth
                          : io_inst[31:20] == 12'h900
                              ? cycle
                              : io_inst[31:20] == 12'h901
                                  ? time_0
                                  : io_inst[31:20] == 12'h902
                                      ? instret
                                      : io_inst[31:20] == 12'h980
                                          ? cycleh
                                          : io_inst[31:20] == 12'h981
                                              ? timeh
                                              : io_inst[31:20] == 12'h982
                                                  ? instreth
                                                  : io_inst[31:20] == 12'hF00
                                                      ? 32'h100100
                                                      : io_inst[31:20] == 12'hF01
                                                        | io_inst[31:20] == 12'hF10
                                                          ? 32'h0
                                                          : io_inst[31:20] == 12'h301
                                                              ? 32'h100
                                                              : io_inst[31:20] == 12'h302
                                                                  ? 32'h0
                                                                  : io_inst[31:20] == 12'h304
                                                                      ? {24'h0,
                                                                         MTIE,
                                                                         3'h0,
                                                                         MSIE,
                                                                         3'h0}
                                                                      : io_inst[31:20] == 12'h321
                                                                          ? mtimecmp
                                                                          : io_inst[31:20] == 12'h701
                                                                              ? time_0
                                                                              : io_inst[31:20] == 12'h741
                                                                                  ? timeh
                                                                                  : io_inst[31:20] == 12'h340
                                                                                      ? mscratch
                                                                                      : io_inst[31:20] == 12'h341
                                                                                          ? mepc
                                                                                          : io_inst[31:20] == 12'h342
                                                                                              ? mcause
                                                                                              : io_inst[31:20] == 12'h343
                                                                                                  ? mbadaddr
                                                                                                  : io_inst[31:20] == 12'h344
                                                                                                      ? {24'h0,
                                                                                                         MTIP,
                                                                                                         3'h0,
                                                                                                         MSIP,
                                                                                                         3'h0}
                                                                                                      : io_inst[31:20] == 12'h780
                                                                                                          ? mtohost
                                                                                                          : io_inst[31:20] == 12'h781
                                                                                                              ? mfromhost
                                                                                                              : io_inst[31:20] == 12'h300
                                                                                                                  ? {26'h0,
                                                                                                                     PRV1,
                                                                                                                     IE1,
                                                                                                                     PRV,
                                                                                                                     IE}
                                                                                                                  : 32'h0;
  wire        privInst = io_cmd == 3'h4;
  wire        isEcall = privInst & ~(io_inst[20]) & ~(io_inst[28]);
  wire        isEbreak = privInst & io_inst[20] & ~(io_inst[28]);
  wire        wen = io_cmd == 3'h1 | io_cmd[1] & (|(io_inst[19:15]));
  wire        iaddrInvalid = io_pc_check & io_addr[1];
  wire        laddrInvalid =
    io_ld_type == 3'h4 | io_ld_type == 3'h2
      ? io_addr[0]
      : io_ld_type == 3'h1 & (|(io_addr[1:0]));
  wire        saddrInvalid =
    io_st_type == 2'h2 ? io_addr[0] : io_st_type == 2'h1 & (|(io_addr[1:0]));
  wire        _io_expt_T_12 = io_inst[29:28] > PRV;
  wire        io_expt_0 =
    io_illegal | iaddrInvalid | laddrInvalid | saddrInvalid | (|(io_cmd[1:0]))
    & (~(io_inst[31:20] == 12'hC00 | io_inst[31:20] == 12'hC01 | io_inst[31:20] == 12'hC02
         | io_inst[31:20] == 12'hC80 | io_inst[31:20] == 12'hC81
         | io_inst[31:20] == 12'hC82 | io_inst[31:20] == 12'h900
         | io_inst[31:20] == 12'h901 | io_inst[31:20] == 12'h902
         | io_inst[31:20] == 12'h980 | io_inst[31:20] == 12'h981
         | io_inst[31:20] == 12'h982 | io_inst[31:20] == 12'hF00
         | io_inst[31:20] == 12'hF01 | io_inst[31:20] == 12'hF10
         | io_inst[31:20] == 12'h301 | io_inst[31:20] == 12'h302
         | io_inst[31:20] == 12'h304 | io_inst[31:20] == 12'h321
         | io_inst[31:20] == 12'h701 | io_inst[31:20] == 12'h741
         | io_inst[31:20] == 12'h340 | io_inst[31:20] == 12'h341
         | io_inst[31:20] == 12'h342 | io_inst[31:20] == 12'h343
         | io_inst[31:20] == 12'h344 | io_inst[31:20] == 12'h780
         | io_inst[31:20] == 12'h781 | io_inst[31:20] == 12'h300) | _io_expt_T_12) | wen
    & ((&(io_inst[31:30])) | io_inst[31:20] == 12'h301 | io_inst[31:20] == 12'h302)
    | privInst & _io_expt_T_12 | isEcall | isEbreak;
  wire        isInstRet =
    io_inst != 32'h13 & (~io_expt_0 | isEcall | isEbreak) & ~io_stall;
  wire        _GEN = io_inst[31:20] == 12'h900;
  wire        _GEN_0 = io_inst[31:20] == 12'h901;
  wire        _GEN_1 = io_inst[31:20] == 12'h902;
  wire        _GEN_2 = io_inst[31:20] == 12'h980;
  wire        _GEN_3 = io_inst[31:20] == 12'h981;
  wire        isEret = privInst & ~(io_inst[20]) & io_inst[28];
  wire [31:0] _wdata_T = io_out_0 | io_in;
  wire [31:0] _wdata_T_2 = io_out_0 & ~io_in;
  wire [31:0] _wdata_T_4 = io_cmd == 3'h1 ? io_in : 32'h0;
  wire        _wdata_T_5 = io_cmd == 3'h2;
  wire        _wdata_T_7 = io_cmd == 3'h3;
  wire [31:0] wdata = _wdata_T_7 ? _wdata_T_2 : _wdata_T_5 ? _wdata_T : _wdata_T_4;
  wire        _GEN_4 = io_inst[31:20] == 12'h300;
  wire        _GEN_5 = io_inst[31:20] == 12'h344;
  wire        _GEN_6 = io_expt_0 | isEret;
  wire        _GEN_7 = io_inst[31:20] == 12'h304;
  wire        _GEN_8 = io_inst[31:20] == 12'h701;
  wire        _GEN_9 = io_inst[31:20] == 12'h741;
  wire        _GEN_10 = io_inst[31:20] == 12'h321;
  wire        _GEN_11 = io_inst[31:20] == 12'h340;
  wire        _GEN_12 = io_inst[31:20] == 12'h341;
  wire        _GEN_13 = io_inst[31:20] == 12'h342;
  wire        _GEN_14 = io_inst[31:20] == 12'h343;
  wire        _GEN_15 = io_inst[31:20] == 12'h780;
  wire        _GEN_16 = io_inst[31:20] == 12'h781;
  wire        _GEN_17 = io_stall | _GEN_6 | ~wen | _GEN_4 | ~_GEN_5;
  wire        _GEN_18 = io_stall | _GEN_6 | ~wen | _GEN_4 | _GEN_5 | ~_GEN_7;
  wire        _GEN_19 = wen & _GEN_4;
  always @(posedge clock) begin
    if (reset) begin
      time_0 <= 32'h0;
      timeh <= 32'h0;
      cycle <= 32'h0;
      cycleh <= 32'h0;
      instret <= 32'h0;
      instreth <= 32'h0;
      PRV <= 2'h3;
      PRV1 <= 2'h3;
      IE <= 1'h0;
      IE1 <= 1'h0;
      MTIP <= 1'h0;
      MTIE <= 1'h0;
      MSIP <= 1'h0;
      MSIE <= 1'h0;
      mtohost <= 32'h0;
    end
    else begin
      if (io_stall | _GEN_6 | ~wen | _GEN_4 | _GEN_5 | _GEN_7
          | ~(_GEN_8
              | ~(_GEN_9 | _GEN_10 | _GEN_11 | _GEN_12 | _GEN_13 | _GEN_14 | _GEN_15
                  | _GEN_16 | _GEN | ~_GEN_0)))
        time_0 <= time_0 + 32'h1;
      else if (_wdata_T_7)
        time_0 <= _wdata_T_2;
      else if (_wdata_T_5)
        time_0 <= _wdata_T;
      else
        time_0 <= _wdata_T_4;
      if (io_stall | _GEN_6 | ~wen | _GEN_4 | _GEN_5 | _GEN_7 | _GEN_8
          | ~(_GEN_9
              | ~(_GEN_10 | _GEN_11 | _GEN_12 | _GEN_13 | _GEN_14 | _GEN_15 | _GEN_16
                  | _GEN | _GEN_0 | _GEN_1 | _GEN_2 | ~_GEN_3))) begin
        if (&time_0)
          timeh <= timeh + 32'h1;
      end
      else if (_wdata_T_7)
        timeh <= _wdata_T_2;
      else if (_wdata_T_5)
        timeh <= _wdata_T;
      else
        timeh <= _wdata_T_4;
      if (io_stall | _GEN_6 | ~wen | _GEN_4 | _GEN_5 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10
          | _GEN_11 | _GEN_12 | _GEN_13 | _GEN_14 | _GEN_15 | _GEN_16 | ~_GEN)
        cycle <= cycle + 32'h1;
      else if (_wdata_T_7)
        cycle <= _wdata_T_2;
      else if (_wdata_T_5)
        cycle <= _wdata_T;
      else
        cycle <= _wdata_T_4;
      if (io_stall | _GEN_6 | ~wen | _GEN_4 | _GEN_5 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10
          | _GEN_11 | _GEN_12 | _GEN_13 | _GEN_14 | _GEN_15 | _GEN_16 | _GEN | _GEN_0
          | _GEN_1 | ~_GEN_2) begin
        if (&cycle)
          cycleh <= cycleh + 32'h1;
      end
      else if (_wdata_T_7)
        cycleh <= _wdata_T_2;
      else if (_wdata_T_5)
        cycleh <= _wdata_T;
      else
        cycleh <= _wdata_T_4;
      if (io_stall | _GEN_6 | ~wen | _GEN_4 | _GEN_5 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10
          | _GEN_11 | _GEN_12 | _GEN_13 | _GEN_14 | _GEN_15 | _GEN_16 | _GEN | _GEN_0
          | ~_GEN_1) begin
        if (isInstRet)
          instret <= instret + 32'h1;
      end
      else if (_wdata_T_7)
        instret <= _wdata_T_2;
      else if (_wdata_T_5)
        instret <= _wdata_T;
      else
        instret <= _wdata_T_4;
      if (io_stall | _GEN_6 | ~wen | _GEN_4 | _GEN_5 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10
          | _GEN_11 | _GEN_12 | _GEN_13 | _GEN_14 | _GEN_15 | _GEN_16 | _GEN | _GEN_0
          | _GEN_1 | _GEN_2 | _GEN_3 | io_inst[31:20] != 12'h982) begin
        if (isInstRet & (&instret))
          instreth <= instreth + 32'h1;
      end
      else if (_wdata_T_7)
        instreth <= _wdata_T_2;
      else if (_wdata_T_5)
        instreth <= _wdata_T;
      else
        instreth <= _wdata_T_4;
      if (io_stall) begin
      end
      else begin
        if (io_expt_0) begin
          PRV <= 2'h3;
          PRV1 <= PRV;
          IE1 <= IE;
        end
        else begin
          if (isEret) begin
            PRV <= PRV1;
            PRV1 <= 2'h0;
          end
          else if (_GEN_19) begin
            PRV <= wdata[2:1];
            PRV1 <= wdata[5:4];
          end
          IE1 <= isEret | (_GEN_19 ? wdata[3] : IE1);
        end
        IE <= ~io_expt_0 & (isEret ? IE1 : _GEN_19 ? wdata[0] : IE);
      end
      if (_GEN_17) begin
      end
      else
        MTIP <= wdata[7];
      if (_GEN_18) begin
      end
      else
        MTIE <= wdata[7];
      if (_GEN_17) begin
      end
      else
        MSIP <= wdata[3];
      if (_GEN_18) begin
      end
      else
        MSIE <= wdata[3];
      if (io_stall | _GEN_6 | ~wen | _GEN_4 | _GEN_5 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10
          | _GEN_11 | _GEN_12 | _GEN_13 | _GEN_14 | ~_GEN_15) begin
      end
      else if (_wdata_T_7)
        mtohost <= _wdata_T_2;
      else if (_wdata_T_5)
        mtohost <= _wdata_T;
      else
        mtohost <= _wdata_T_4;
    end
    if (io_stall | _GEN_6 | ~wen | _GEN_4 | _GEN_5 | _GEN_7 | _GEN_8 | _GEN_9
        | ~_GEN_10) begin
    end
    else if (_wdata_T_7)
      mtimecmp <= _wdata_T_2;
    else if (_wdata_T_5)
      mtimecmp <= _wdata_T;
    else
      mtimecmp <= _wdata_T_4;
    if (io_stall | _GEN_6 | ~wen | _GEN_4 | _GEN_5 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10
        | ~_GEN_11) begin
    end
    else if (_wdata_T_7)
      mscratch <= _wdata_T_2;
    else if (_wdata_T_5)
      mscratch <= _wdata_T;
    else
      mscratch <= _wdata_T_4;
    if (io_stall) begin
    end
    else if (io_expt_0) begin
      mepc <= {io_pc[31:2], 2'h0};
      mcause <=
        {28'h0,
         iaddrInvalid
           ? 4'h0
           : laddrInvalid
               ? 4'h4
               : saddrInvalid ? 4'h6 : isEcall ? {2'h0, PRV} - 4'h8 : {3'h1, isEbreak}};
      if (iaddrInvalid | laddrInvalid | saddrInvalid)
        mbadaddr <= io_addr;
    end
    else begin
      if (isEret | ~wen | _GEN_4 | _GEN_5 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10 | _GEN_11
          | ~_GEN_12) begin
      end
      else
        mepc <= {wdata[31:2], 2'h0};
      if (isEret | ~wen | _GEN_4 | _GEN_5 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10 | _GEN_11
          | _GEN_12 | ~_GEN_13) begin
      end
      else
        mcause <= wdata & 32'h8000000F;
      if (isEret | ~wen | _GEN_4 | _GEN_5 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10 | _GEN_11
          | _GEN_12 | _GEN_13 | ~_GEN_14) begin
      end
      else if (_wdata_T_7)
        mbadaddr <= _wdata_T_2;
      else if (_wdata_T_5)
        mbadaddr <= _wdata_T;
      else
        mbadaddr <= _wdata_T_4;
    end
    if (io_stall | _GEN_6 | ~wen | _GEN_4 | _GEN_5 | _GEN_7 | _GEN_8 | _GEN_9 | _GEN_10
        | _GEN_11 | _GEN_12 | _GEN_13 | _GEN_14 | _GEN_15 | ~_GEN_16) begin
      if (io_host_fromhost_valid)
        mfromhost <= io_host_fromhost_bits;
    end
    else if (_wdata_T_7)
      mfromhost <= _wdata_T_2;
    else if (_wdata_T_5)
      mfromhost <= _wdata_T;
    else
      mfromhost <= _wdata_T_4;
  end // always @(posedge)
  assign io_out = io_out_0;
  assign io_expt = io_expt_0;
  assign io_evec = {24'h0, PRV, 6'h0} + 32'h100;
  assign io_epc = mepc;
  assign io_host_tohost = mtohost;
endmodule

// VCS coverage exclude_file
module regs_32x32(
  input  [4:0]  R0_addr,
  input         R0_en,
  input         R0_clk,
  output [31:0] R0_data,
  input  [4:0]  R1_addr,
  input         R1_en,
  input         R1_clk,
  output [31:0] R1_data,
  input  [4:0]  W0_addr,
  input         W0_en,
  input         W0_clk,
  input  [31:0] W0_data
);

  reg [31:0] Memory[0:31];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;
  assign R1_data = R1_en ? Memory[R1_addr] : 32'bx;
endmodule

module RegFile(
  input         clock,
  input  [4:0]  io_raddr1,
  input  [4:0]  io_raddr2,
  output [31:0] io_rdata1,
  output [31:0] io_rdata2,
  input         io_wen,
  input  [4:0]  io_waddr,
  input  [31:0] io_wdata
);

  wire [31:0] _regs_ext_R0_data;
  wire [31:0] _regs_ext_R1_data;
  regs_32x32 regs_ext (
    .R0_addr (io_raddr2),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_regs_ext_R0_data),
    .R1_addr (io_raddr1),
    .R1_en   (1'h1),
    .R1_clk  (clock),
    .R1_data (_regs_ext_R1_data),
    .W0_addr (io_waddr),
    .W0_en   (io_wen & (|io_waddr)),
    .W0_clk  (clock),
    .W0_data (io_wdata)
  );
  assign io_rdata1 = (|io_raddr1) ? _regs_ext_R1_data : 32'h0;
  assign io_rdata2 = (|io_raddr2) ? _regs_ext_R0_data : 32'h0;
endmodule

module AluArea(
  input  [31:0] io_A,
  input  [31:0] io_B,
  input  [3:0]  io_alu_op,
  output [31:0] io_out,
  output [31:0] io_sum
);

  wire [31:0] _sum_T_4 = io_A + (io_alu_op[0] ? 32'h0 - io_B : io_B);
  wire [7:0]  _GEN =
    {{io_A[11:8], io_A[15:14]} & 6'h33, 2'h0} | {io_A[15:12], io_A[19:16]} & 8'h33;
  wire [18:0] _GEN_0 =
    {io_A[5:4], io_A[7:6], io_A[9:8], _GEN, io_A[19:18], io_A[21:20], io_A[23]}
    & 19'h55555;
  wire [31:0] shin =
    io_alu_op[3]
      ? io_A
      : {io_A[0],
         io_A[1],
         io_A[2],
         io_A[3],
         io_A[4],
         _GEN_0[18:15] | {io_A[7:6], io_A[9:8]} & 4'h5,
         _GEN_0[14:7] | _GEN & 8'h55,
         _GEN[1],
         _GEN_0[5] | io_A[18],
         io_A[19],
         io_A[20],
         {_GEN_0[2:0], 1'h0} | {io_A[23:22], io_A[25:24]} & 4'h5,
         io_A[25],
         io_A[26],
         io_A[27],
         io_A[28],
         io_A[29],
         io_A[30],
         io_A[31]};
  wire [32:0] _shiftr_T_5 =
    $signed($signed({io_alu_op[0] & shin[31], shin}) >>> io_B[4:0]);
  wire [7:0]  _GEN_1 =
    {{_shiftr_T_5[11:8], _shiftr_T_5[15:14]} & 6'h33, 2'h0}
    | {_shiftr_T_5[15:12], _shiftr_T_5[19:16]} & 8'h33;
  wire [18:0] _GEN_2 =
    {_shiftr_T_5[5:4],
     _shiftr_T_5[7:6],
     _shiftr_T_5[9:8],
     _GEN_1,
     _shiftr_T_5[19:18],
     _shiftr_T_5[21:20],
     _shiftr_T_5[23]} & 19'h55555;
  assign io_out =
    io_alu_op == 4'h0 | io_alu_op == 4'h1
      ? _sum_T_4
      : io_alu_op == 4'h5 | io_alu_op == 4'h7
          ? {31'h0,
             io_A[31] == io_B[31] ? _sum_T_4[31] : io_alu_op[1] ? io_B[31] : io_A[31]}
          : io_alu_op == 4'h9 | io_alu_op == 4'h8
              ? _shiftr_T_5[31:0]
              : io_alu_op == 4'h6
                  ? {_shiftr_T_5[0],
                     _shiftr_T_5[1],
                     _shiftr_T_5[2],
                     _shiftr_T_5[3],
                     _shiftr_T_5[4],
                     _GEN_2[18:15] | {_shiftr_T_5[7:6], _shiftr_T_5[9:8]} & 4'h5,
                     _GEN_2[14:7] | _GEN_1 & 8'h55,
                     _GEN_1[1],
                     _GEN_2[5] | _shiftr_T_5[18],
                     _shiftr_T_5[19],
                     _shiftr_T_5[20],
                     {_GEN_2[2:0], 1'h0} | {_shiftr_T_5[23:22], _shiftr_T_5[25:24]}
                       & 4'h5,
                     _shiftr_T_5[25],
                     _shiftr_T_5[26],
                     _shiftr_T_5[27],
                     _shiftr_T_5[28],
                     _shiftr_T_5[29],
                     _shiftr_T_5[30],
                     _shiftr_T_5[31]}
                  : io_alu_op == 4'h2
                      ? io_A & io_B
                      : io_alu_op == 4'h3
                          ? io_A | io_B
                          : io_alu_op == 4'h4
                              ? io_A ^ io_B
                              : io_alu_op == 4'hA ? io_A : io_B;
  assign io_sum = _sum_T_4;
endmodule

module ImmGenWire(
  input  [31:0] io_inst,
  input  [2:0]  io_sel,
  output [31:0] io_out
);

  wire [11:0] _io_out_T_5 =
    io_sel == 3'h2
      ? {io_inst[31:25], io_inst[11:7]}
      : io_sel == 3'h1 ? io_inst[31:20] : {io_inst[31:21], 1'h0};
  wire [12:0] _io_out_T_7 =
    io_sel == 3'h5
      ? {io_inst[31], io_inst[7], io_inst[30:25], io_inst[11:8], 1'h0}
      : {_io_out_T_5[11], _io_out_T_5};
  assign io_out =
    io_sel == 3'h6
      ? {27'h0, io_inst[19:15]}
      : io_sel == 3'h4
          ? {{12{io_inst[31]}}, io_inst[19:12], io_inst[20], io_inst[30:21], 1'h0}
          : io_sel == 3'h3
              ? {io_inst[31:12], 12'h0}
              : {{19{_io_out_T_7[12]}}, _io_out_T_7};
endmodule

module BrCondArea(
  input  [31:0] io_rs1,
  input  [31:0] io_rs2,
  input  [2:0]  io_br_type,
  output        io_taken
);

  wire [31:0] _diff_T = io_rs1 - io_rs2;
  wire        isSameSign = io_rs1[31] == io_rs2[31];
  wire        lt = isSameSign ? _diff_T[31] : io_rs1[31];
  wire        ltu = isSameSign ? _diff_T[31] : io_rs2[31];
  assign io_taken =
    io_br_type == 3'h3 & ~(|_diff_T) | io_br_type == 3'h6 & (|_diff_T)
    | io_br_type == 3'h2 & lt | io_br_type == 3'h5 & ~lt | io_br_type == 3'h1 & ltu
    | io_br_type == 3'h4 & ~ltu;
endmodule

module Datapath(
  input         clock,
  input         reset,
  input         io_host_fromhost_valid,
  input  [31:0] io_host_fromhost_bits,
  output [31:0] io_host_tohost,
  output        io_icache_req_valid,
  output [31:0] io_icache_req_bits_addr,
  input         io_icache_resp_valid,
  input  [31:0] io_icache_resp_bits_data,
  output        io_dcache_abort,
  output        io_dcache_req_valid,
  output [31:0] io_dcache_req_bits_addr,
  output [31:0] io_dcache_req_bits_data,
  output [3:0]  io_dcache_req_bits_mask,
  input         io_dcache_resp_valid,
  input  [31:0] io_dcache_resp_bits_data,
  output [31:0] io_ctrl_inst,
  input  [1:0]  io_ctrl_pc_sel,
  input         io_ctrl_inst_kill,
  input         io_ctrl_A_sel,
  input         io_ctrl_B_sel,
  input  [2:0]  io_ctrl_imm_sel,
  input  [3:0]  io_ctrl_alu_op,
  input  [2:0]  io_ctrl_br_type,
  input  [1:0]  io_ctrl_st_type,
  input  [2:0]  io_ctrl_ld_type,
  input  [1:0]  io_ctrl_wb_sel,
  input         io_ctrl_wb_en,
  input  [2:0]  io_ctrl_csr_cmd,
  input         io_ctrl_illegal
);

  wire         _brCond_io_taken;
  wire [31:0]  _immGen_io_out;
  wire [31:0]  _alu_io_out;
  wire [31:0]  _alu_io_sum;
  wire [31:0]  _regFile_io_rdata1;
  wire [31:0]  _regFile_io_rdata2;
  wire [31:0]  _csr_io_out;
  wire         _csr_io_expt;
  wire [31:0]  _csr_io_evec;
  wire [31:0]  _csr_io_epc;
  reg  [31:0]  fe_reg_inst;
  reg  [31:0]  fe_reg_pc;
  reg  [31:0]  ew_reg_inst;
  reg  [31:0]  ew_reg_pc;
  reg  [31:0]  ew_reg_alu;
  reg  [31:0]  ew_reg_csr_in;
  reg  [1:0]   st_type;
  reg  [2:0]   ld_type;
  reg  [1:0]   wb_sel;
  reg          wb_en;
  reg  [2:0]   csr_cmd;
  reg          illegal;
  reg          pc_check;
  reg          started;
  wire         stall = ~io_icache_resp_valid | ~io_dcache_resp_valid;
  reg  [32:0]  pc;
  wire [32:0]  _next_pc_T = pc + 33'h4;
  wire         _pc_check_T = io_ctrl_pc_sel == 2'h1;
  wire         _next_pc_T_4 = _pc_check_T | _brCond_io_taken;
  wire         _next_pc_T_7 = io_ctrl_pc_sel == 2'h2;
  wire         _rs2_T = wb_sel == 2'h0;
  wire [31:0]  rs1 =
    _rs2_T & wb_en & (|(fe_reg_inst[19:15])) & fe_reg_inst[19:15] == ew_reg_inst[11:7]
      ? ew_reg_alu
      : _regFile_io_rdata1;
  wire [31:0]  rs2 =
    _rs2_T & wb_en & (|(fe_reg_inst[24:20])) & fe_reg_inst[24:20] == ew_reg_inst[11:7]
      ? ew_reg_alu
      : _regFile_io_rdata2;
  wire [286:0] _io_dcache_req_bits_data_T =
    {255'h0, rs2} << {282'h0, _alu_io_sum[1:0], 3'h0};
  wire [1:0]   _io_dcache_req_bits_mask_T = stall ? st_type : io_ctrl_st_type;
  wire [4:0]   _io_dcache_req_bits_mask_T_2 = 5'h3 << _alu_io_sum[1:0];
  reg  [32:0]  casez_tmp;
  wire [31:0]  lshift = io_dcache_resp_bits_data >> {27'h0, ew_reg_alu[1:0], 3'h0};
  always @(*) begin
    casez (wb_sel)
      2'b00:
        casez_tmp = {1'h0, ew_reg_alu};
      2'b01:
        casez_tmp =
          ld_type == 3'h5
            ? {25'h0, lshift[7:0]}
            : ld_type == 3'h4
                ? {17'h0, lshift[15:0]}
                : ld_type == 3'h3
                    ? {{25{lshift[7]}}, lshift[7:0]}
                    : ld_type == 3'h2
                        ? {{17{lshift[15]}}, lshift[15:0]}
                        : {1'h0, io_dcache_resp_bits_data};
      2'b10:
        casez_tmp = {1'h0, ew_reg_pc + 32'h4};
      default:
        casez_tmp = {1'h0, _csr_io_out};
    endcase
  end // always @(*)
  wire         _GEN = reset | ~stall & _csr_io_expt;
  wire         _GEN_0 = ~stall & ~_csr_io_expt;
  wire         _GEN_1 = _GEN | ~_GEN_0;
  always @(posedge clock) begin
    if (reset) begin
      fe_reg_inst <= 32'h13;
      fe_reg_pc <= 32'h0;
      ew_reg_inst <= 32'h13;
      ew_reg_pc <= 32'h0;
      ew_reg_alu <= 32'h0;
      ew_reg_csr_in <= 32'h0;
      pc <= 33'h1FC;
    end
    else begin
      if (~stall) begin
        fe_reg_inst <=
          started | io_ctrl_inst_kill | _brCond_io_taken | _csr_io_expt
            ? 32'h13
            : io_icache_resp_bits_data;
        fe_reg_pc <= pc[31:0];
        if (_csr_io_expt)
          pc <= {1'h0, _csr_io_evec};
        else if (&io_ctrl_pc_sel)
          pc <= {1'h0, _csr_io_epc};
        else if (_next_pc_T_4)
          pc <= {1'h0, _alu_io_sum[31:1], 1'h0};
        else if (~_next_pc_T_7)
          pc <= _next_pc_T;
      end
      if (_GEN_1) begin
      end
      else begin
        ew_reg_inst <= fe_reg_inst;
        ew_reg_pc <= fe_reg_pc;
        ew_reg_alu <= _alu_io_out;
        ew_reg_csr_in <= io_ctrl_imm_sel == 3'h6 ? _immGen_io_out : rs1;
      end
    end
    if (_GEN) begin
      st_type <= 2'h0;
      ld_type <= 3'h0;
      csr_cmd <= 3'h0;
    end
    else if (_GEN_0) begin
      st_type <= io_ctrl_st_type;
      ld_type <= io_ctrl_ld_type;
      csr_cmd <= io_ctrl_csr_cmd;
    end
    if (_GEN_1) begin
    end
    else
      wb_sel <= io_ctrl_wb_sel;
    wb_en <= ~_GEN & (_GEN_0 ? io_ctrl_wb_en : wb_en);
    illegal <= ~_GEN & (_GEN_0 ? io_ctrl_illegal : illegal);
    pc_check <= ~_GEN & (_GEN_0 ? _pc_check_T : pc_check);
    started <= reset;
  end // always @(posedge)
  CSR csr (
    .clock                  (clock),
    .reset                  (reset),
    .io_stall               (stall),
    .io_cmd                 (csr_cmd),
    .io_in                  (ew_reg_csr_in),
    .io_out                 (_csr_io_out),
    .io_pc                  (ew_reg_pc),
    .io_addr                (ew_reg_alu),
    .io_inst                (ew_reg_inst),
    .io_illegal             (illegal),
    .io_st_type             (st_type),
    .io_ld_type             (ld_type),
    .io_pc_check            (pc_check),
    .io_expt                (_csr_io_expt),
    .io_evec                (_csr_io_evec),
    .io_epc                 (_csr_io_epc),
    .io_host_fromhost_valid (io_host_fromhost_valid),
    .io_host_fromhost_bits  (io_host_fromhost_bits),
    .io_host_tohost         (io_host_tohost)
  );
  RegFile regFile (
    .clock     (clock),
    .io_raddr1 (fe_reg_inst[19:15]),
    .io_raddr2 (fe_reg_inst[24:20]),
    .io_rdata1 (_regFile_io_rdata1),
    .io_rdata2 (_regFile_io_rdata2),
    .io_wen    (wb_en & ~stall & ~_csr_io_expt),
    .io_waddr  (ew_reg_inst[11:7]),
    .io_wdata  (casez_tmp[31:0])
  );
  AluArea alu (
    .io_A      (io_ctrl_A_sel ? rs1 : fe_reg_pc),
    .io_B      (io_ctrl_B_sel ? rs2 : _immGen_io_out),
    .io_alu_op (io_ctrl_alu_op),
    .io_out    (_alu_io_out),
    .io_sum    (_alu_io_sum)
  );
  ImmGenWire immGen (
    .io_inst (fe_reg_inst),
    .io_sel  (io_ctrl_imm_sel),
    .io_out  (_immGen_io_out)
  );
  BrCondArea brCond (
    .io_rs1     (rs1),
    .io_rs2     (rs2),
    .io_br_type (io_ctrl_br_type),
    .io_taken   (_brCond_io_taken)
  );
  assign io_icache_req_valid = ~stall;
  assign io_icache_req_bits_addr =
    stall
      ? pc[31:0]
      : _csr_io_expt
          ? _csr_io_evec
          : (&io_ctrl_pc_sel)
              ? _csr_io_epc
              : _next_pc_T_4
                  ? {_alu_io_sum[31:1], 1'h0}
                  : _next_pc_T_7 ? pc[31:0] : _next_pc_T[31:0];
  assign io_dcache_abort = _csr_io_expt;
  assign io_dcache_req_valid = ~stall & ((|io_ctrl_st_type) | (|io_ctrl_ld_type));
  assign io_dcache_req_bits_addr = {stall ? ew_reg_alu[31:2] : _alu_io_sum[31:2], 2'h0};
  assign io_dcache_req_bits_data = _io_dcache_req_bits_data_T[31:0];
  assign io_dcache_req_bits_mask =
    (&_io_dcache_req_bits_mask_T)
      ? 4'h1 << _alu_io_sum[1:0]
      : _io_dcache_req_bits_mask_T == 2'h2
          ? _io_dcache_req_bits_mask_T_2[3:0]
          : {4{_io_dcache_req_bits_mask_T == 2'h1}};
  assign io_ctrl_inst = fe_reg_inst;
endmodule

module Control(
  input  [31:0] io_inst,
  output [1:0]  io_pc_sel,
  output        io_inst_kill,
  output        io_A_sel,
  output        io_B_sel,
  output [2:0]  io_imm_sel,
  output [3:0]  io_alu_op,
  output [2:0]  io_br_type,
  output [1:0]  io_st_type,
  output [2:0]  io_ld_type,
  output [1:0]  io_wb_sel,
  output        io_wb_en,
  output [2:0]  io_csr_cmd,
  output        io_illegal
);

  wire        _ctrlSignals_T_1 = io_inst[6:0] == 7'h37;
  wire        _ctrlSignals_T_3 = io_inst[6:0] == 7'h17;
  wire        _ctrlSignals_T_5 = io_inst[6:0] == 7'h6F;
  wire [9:0]  _GEN = {io_inst[14:12], io_inst[6:0]};
  wire        _ctrlSignals_T_7 = _GEN == 10'h67;
  wire        _ctrlSignals_T_9 = _GEN == 10'h63;
  wire        _ctrlSignals_T_11 = _GEN == 10'hE3;
  wire        _ctrlSignals_T_13 = _GEN == 10'h263;
  wire        _ctrlSignals_T_15 = _GEN == 10'h2E3;
  wire        _ctrlSignals_T_17 = _GEN == 10'h363;
  wire        _ctrlSignals_T_19 = _GEN == 10'h3E3;
  wire        _ctrlSignals_T_21 = _GEN == 10'h3;
  wire        _ctrlSignals_T_23 = _GEN == 10'h83;
  wire        _ctrlSignals_T_25 = _GEN == 10'h103;
  wire        _ctrlSignals_T_27 = _GEN == 10'h203;
  wire        _ctrlSignals_T_29 = _GEN == 10'h283;
  wire        _ctrlSignals_T_31 = _GEN == 10'h23;
  wire        _ctrlSignals_T_33 = _GEN == 10'hA3;
  wire        _ctrlSignals_T_35 = _GEN == 10'h123;
  wire        _ctrlSignals_T_37 = _GEN == 10'h13;
  wire        _ctrlSignals_T_39 = _GEN == 10'h113;
  wire        _ctrlSignals_T_41 = _GEN == 10'h193;
  wire        _ctrlSignals_T_43 = _GEN == 10'h213;
  wire        _ctrlSignals_T_45 = _GEN == 10'h313;
  wire        _ctrlSignals_T_47 = _GEN == 10'h393;
  wire [16:0] _GEN_0 = {io_inst[31:25], io_inst[14:12], io_inst[6:0]};
  wire        _ctrlSignals_T_49 = _GEN_0 == 17'h93;
  wire        _ctrlSignals_T_51 = _GEN_0 == 17'h293;
  wire        _ctrlSignals_T_53 = _GEN_0 == 17'h8293;
  wire        _ctrlSignals_T_55 = _GEN_0 == 17'h33;
  wire        _ctrlSignals_T_57 = _GEN_0 == 17'h8033;
  wire        _ctrlSignals_T_59 = _GEN_0 == 17'hB3;
  wire        _ctrlSignals_T_61 = _GEN_0 == 17'h133;
  wire        _ctrlSignals_T_63 = _GEN_0 == 17'h1B3;
  wire        _ctrlSignals_T_65 = _GEN_0 == 17'h233;
  wire        _ctrlSignals_T_67 = _GEN_0 == 17'h2B3;
  wire        _ctrlSignals_T_69 = _GEN_0 == 17'h82B3;
  wire        _ctrlSignals_T_71 = _GEN_0 == 17'h333;
  wire        _ctrlSignals_T_206 = _GEN_0 == 17'h3B3;
  wire        _ctrlSignals_T_75 = {io_inst[31:28], io_inst[19:0]} == 24'hF;
  wire        _ctrlSignals_T_77 = io_inst == 32'h100F;
  wire        _ctrlSignals_T_79 = _GEN == 10'hF3;
  wire        _ctrlSignals_T_81 = _GEN == 10'h173;
  wire        _ctrlSignals_T_153 = _GEN == 10'h1F3;
  wire        _ctrlSignals_T_85 = _GEN == 10'h2F3;
  wire        _ctrlSignals_T_87 = _GEN == 10'h373;
  wire        _ctrlSignals_T_582 = _GEN == 10'h3F3;
  wire        _ctrlSignals_T_91 = io_inst == 32'h73;
  wire        _ctrlSignals_T_93 = io_inst == 32'h100073;
  wire        _ctrlSignals_T_387 = io_inst == 32'h10000073;
  wire        _GEN_1 = _ctrlSignals_T_91 | _ctrlSignals_T_93;
  wire        _GEN_2 = _ctrlSignals_T_85 | _ctrlSignals_T_87 | _ctrlSignals_T_582;
  wire        _GEN_3 =
    _ctrlSignals_T_77 | _ctrlSignals_T_79 | _ctrlSignals_T_81 | _ctrlSignals_T_153
    | _GEN_2;
  wire        _GEN_4 =
    _ctrlSignals_T_31 | _ctrlSignals_T_33 | _ctrlSignals_T_35 | _ctrlSignals_T_37
    | _ctrlSignals_T_39 | _ctrlSignals_T_41 | _ctrlSignals_T_43 | _ctrlSignals_T_45
    | _ctrlSignals_T_47 | _ctrlSignals_T_49 | _ctrlSignals_T_51 | _ctrlSignals_T_53
    | _ctrlSignals_T_55 | _ctrlSignals_T_57 | _ctrlSignals_T_59 | _ctrlSignals_T_61
    | _ctrlSignals_T_63 | _ctrlSignals_T_65 | _ctrlSignals_T_67 | _ctrlSignals_T_69
    | _ctrlSignals_T_71 | _ctrlSignals_T_206 | _ctrlSignals_T_75;
  wire        _GEN_5 =
    _ctrlSignals_T_21 | _ctrlSignals_T_23 | _ctrlSignals_T_25 | _ctrlSignals_T_27
    | _ctrlSignals_T_29;
  wire        _GEN_6 =
    _ctrlSignals_T_9 | _ctrlSignals_T_11 | _ctrlSignals_T_13 | _ctrlSignals_T_15
    | _ctrlSignals_T_17 | _ctrlSignals_T_19;
  wire        _GEN_7 = _ctrlSignals_T_5 | _ctrlSignals_T_7;
  wire        _GEN_8 = _ctrlSignals_T_1 | _ctrlSignals_T_3;
  wire        _GEN_9 = _ctrlSignals_T_75 | _ctrlSignals_T_77;
  wire        _GEN_10 =
    _ctrlSignals_T_37 | _ctrlSignals_T_39 | _ctrlSignals_T_41 | _ctrlSignals_T_43
    | _ctrlSignals_T_45 | _ctrlSignals_T_47 | _ctrlSignals_T_49 | _ctrlSignals_T_51
    | _ctrlSignals_T_53 | _ctrlSignals_T_55 | _ctrlSignals_T_57 | _ctrlSignals_T_59
    | _ctrlSignals_T_61 | _ctrlSignals_T_63 | _ctrlSignals_T_65 | _ctrlSignals_T_67
    | _ctrlSignals_T_69 | _ctrlSignals_T_71 | _ctrlSignals_T_206;
  wire        _GEN_11 =
    _ctrlSignals_T_37 | _ctrlSignals_T_39 | _ctrlSignals_T_41 | _ctrlSignals_T_43
    | _ctrlSignals_T_45 | _ctrlSignals_T_47 | _ctrlSignals_T_49 | _ctrlSignals_T_51
    | _ctrlSignals_T_53;
  wire        _GEN_12 = _ctrlSignals_T_79 | _ctrlSignals_T_81 | _ctrlSignals_T_153;
  wire        _GEN_13 = _ctrlSignals_T_31 | _ctrlSignals_T_33 | _ctrlSignals_T_35;
  wire        _GEN_14 = _ctrlSignals_T_1 | _ctrlSignals_T_3 | _GEN_7;
  wire        _GEN_15 = _ctrlSignals_T_91 | _ctrlSignals_T_93 | _ctrlSignals_T_387;
  wire        _GEN_16 =
    _ctrlSignals_T_79 | _ctrlSignals_T_81 | _ctrlSignals_T_153 | _ctrlSignals_T_85
    | _ctrlSignals_T_87 | _ctrlSignals_T_582 | _GEN_15;
  wire        _GEN_17 =
    _ctrlSignals_T_31 | _ctrlSignals_T_33 | _ctrlSignals_T_35 | _ctrlSignals_T_37
    | _ctrlSignals_T_39 | _ctrlSignals_T_41 | _ctrlSignals_T_43 | _ctrlSignals_T_45
    | _ctrlSignals_T_47 | _ctrlSignals_T_49 | _ctrlSignals_T_51 | _ctrlSignals_T_53
    | _ctrlSignals_T_55 | _ctrlSignals_T_57 | _ctrlSignals_T_59 | _ctrlSignals_T_61
    | _ctrlSignals_T_63 | _ctrlSignals_T_65 | _ctrlSignals_T_67 | _ctrlSignals_T_69
    | _ctrlSignals_T_71 | _ctrlSignals_T_206 | _GEN_9;
  assign io_pc_sel =
    _GEN_8
      ? 2'h0
      : _GEN_7
          ? 2'h1
          : _GEN_6
              ? 2'h0
              : _GEN_5
                  ? 2'h2
                  : _GEN_4
                      ? 2'h0
                      : _GEN_3 ? 2'h2 : _GEN_1 ? 2'h0 : {2{_ctrlSignals_T_387}};
  assign io_inst_kill =
    ~_GEN_8
    & (_GEN_7 | ~_GEN_6 & (_GEN_5 | ~_GEN_4 & (_GEN_3 | ~_GEN_1 & _ctrlSignals_T_387)));
  assign io_A_sel =
    ~(_ctrlSignals_T_1 | _ctrlSignals_T_3 | _ctrlSignals_T_5)
    & (_ctrlSignals_T_7 | ~_GEN_6
       & (_ctrlSignals_T_21 | _ctrlSignals_T_23 | _ctrlSignals_T_25 | _ctrlSignals_T_27
          | _ctrlSignals_T_29 | _ctrlSignals_T_31 | _ctrlSignals_T_33 | _ctrlSignals_T_35
          | _GEN_10 | ~_GEN_9
          & (_ctrlSignals_T_79 | _ctrlSignals_T_81 | _ctrlSignals_T_153)));
  assign io_B_sel =
    ~(_ctrlSignals_T_1 | _ctrlSignals_T_3 | _ctrlSignals_T_5 | _ctrlSignals_T_7
      | _ctrlSignals_T_9 | _ctrlSignals_T_11 | _ctrlSignals_T_13 | _ctrlSignals_T_15
      | _ctrlSignals_T_17 | _ctrlSignals_T_19 | _ctrlSignals_T_21 | _ctrlSignals_T_23
      | _ctrlSignals_T_25 | _ctrlSignals_T_27 | _ctrlSignals_T_29 | _ctrlSignals_T_31
      | _ctrlSignals_T_33 | _ctrlSignals_T_35 | _GEN_11)
    & (_ctrlSignals_T_55 | _ctrlSignals_T_57 | _ctrlSignals_T_59 | _ctrlSignals_T_61
       | _ctrlSignals_T_63 | _ctrlSignals_T_65 | _ctrlSignals_T_67 | _ctrlSignals_T_69
       | _ctrlSignals_T_71 | _ctrlSignals_T_206);
  assign io_imm_sel =
    _GEN_8
      ? 3'h3
      : _ctrlSignals_T_5
          ? 3'h4
          : _ctrlSignals_T_7
              ? 3'h1
              : _GEN_6
                  ? 3'h5
                  : _GEN_5
                      ? 3'h1
                      : _GEN_13
                          ? 3'h2
                          : _GEN_11
                              ? 3'h1
                              : _ctrlSignals_T_55 | _ctrlSignals_T_57 | _ctrlSignals_T_59
                                | _ctrlSignals_T_61 | _ctrlSignals_T_63
                                | _ctrlSignals_T_65 | _ctrlSignals_T_67
                                | _ctrlSignals_T_69 | _ctrlSignals_T_71
                                | _ctrlSignals_T_206 | _ctrlSignals_T_75
                                | _ctrlSignals_T_77 | _GEN_12 | ~_GEN_2
                                  ? 3'h0
                                  : 3'h6;
  assign io_alu_op =
    _ctrlSignals_T_1
      ? 4'hB
      : _ctrlSignals_T_3 | _ctrlSignals_T_5 | _ctrlSignals_T_7 | _ctrlSignals_T_9
        | _ctrlSignals_T_11 | _ctrlSignals_T_13 | _ctrlSignals_T_15 | _ctrlSignals_T_17
        | _ctrlSignals_T_19 | _ctrlSignals_T_21 | _ctrlSignals_T_23 | _ctrlSignals_T_25
        | _ctrlSignals_T_27 | _ctrlSignals_T_29 | _ctrlSignals_T_31 | _ctrlSignals_T_33
        | _ctrlSignals_T_35 | _ctrlSignals_T_37
          ? 4'h0
          : _ctrlSignals_T_39
              ? 4'h5
              : _ctrlSignals_T_41
                  ? 4'h7
                  : _ctrlSignals_T_43
                      ? 4'h4
                      : _ctrlSignals_T_45
                          ? 4'h3
                          : _ctrlSignals_T_47
                              ? 4'h2
                              : _ctrlSignals_T_49
                                  ? 4'h6
                                  : _ctrlSignals_T_51
                                      ? 4'h8
                                      : _ctrlSignals_T_53
                                          ? 4'h9
                                          : _ctrlSignals_T_55
                                              ? 4'h0
                                              : _ctrlSignals_T_57
                                                  ? 4'h1
                                                  : _ctrlSignals_T_59
                                                      ? 4'h6
                                                      : _ctrlSignals_T_61
                                                          ? 4'h5
                                                          : _ctrlSignals_T_63
                                                              ? 4'h7
                                                              : _ctrlSignals_T_65
                                                                  ? 4'h4
                                                                  : _ctrlSignals_T_67
                                                                      ? 4'h8
                                                                      : _ctrlSignals_T_69
                                                                          ? 4'h9
                                                                          : _ctrlSignals_T_71
                                                                              ? 4'h3
                                                                              : _ctrlSignals_T_206
                                                                                  ? 4'h2
                                                                                  : _GEN_9
                                                                                    | ~_GEN_12
                                                                                      ? 4'hF
                                                                                      : 4'hA;
  assign io_br_type =
    _GEN_14
      ? 3'h0
      : _ctrlSignals_T_9
          ? 3'h3
          : _ctrlSignals_T_11
              ? 3'h6
              : _ctrlSignals_T_13
                  ? 3'h2
                  : _ctrlSignals_T_15
                      ? 3'h5
                      : _ctrlSignals_T_17 ? 3'h1 : {_ctrlSignals_T_19, 2'h0};
  assign io_st_type =
    _ctrlSignals_T_1 | _ctrlSignals_T_3 | _ctrlSignals_T_5 | _ctrlSignals_T_7
    | _ctrlSignals_T_9 | _ctrlSignals_T_11 | _ctrlSignals_T_13 | _ctrlSignals_T_15
    | _ctrlSignals_T_17 | _ctrlSignals_T_19 | _GEN_5
      ? 2'h0
      : _ctrlSignals_T_31 ? 2'h3 : _ctrlSignals_T_33 ? 2'h2 : {1'h0, _ctrlSignals_T_35};
  assign io_ld_type =
    _ctrlSignals_T_1 | _ctrlSignals_T_3 | _ctrlSignals_T_5 | _ctrlSignals_T_7 | _GEN_6
      ? 3'h0
      : _ctrlSignals_T_21
          ? 3'h3
          : _ctrlSignals_T_23
              ? 3'h2
              : _ctrlSignals_T_25
                  ? 3'h1
                  : _ctrlSignals_T_27 ? 3'h5 : {_ctrlSignals_T_29, 2'h0};
  assign io_wb_sel =
    _GEN_8
      ? 2'h0
      : _GEN_7 ? 2'h2 : _GEN_6 ? 2'h0 : _GEN_5 ? 2'h1 : _GEN_17 ? 2'h0 : {2{_GEN_16}};
  assign io_wb_en =
    _GEN_14 | ~_GEN_6
    & (_GEN_5 | ~_GEN_13
       & (_GEN_10 | ~_GEN_9
          & (_ctrlSignals_T_79 | _ctrlSignals_T_81 | _ctrlSignals_T_153
             | _ctrlSignals_T_85 | _ctrlSignals_T_87 | _ctrlSignals_T_582)));
  assign io_csr_cmd =
    _ctrlSignals_T_1 | _ctrlSignals_T_3 | _ctrlSignals_T_5 | _ctrlSignals_T_7
    | _ctrlSignals_T_9 | _ctrlSignals_T_11 | _ctrlSignals_T_13 | _ctrlSignals_T_15
    | _ctrlSignals_T_17 | _ctrlSignals_T_19 | _ctrlSignals_T_21 | _ctrlSignals_T_23
    | _ctrlSignals_T_25 | _ctrlSignals_T_27 | _ctrlSignals_T_29 | _GEN_17
      ? 3'h0
      : _ctrlSignals_T_79
          ? 3'h1
          : _ctrlSignals_T_81
              ? 3'h2
              : _ctrlSignals_T_153
                  ? 3'h3
                  : _ctrlSignals_T_85
                      ? 3'h1
                      : _ctrlSignals_T_87
                          ? 3'h2
                          : _ctrlSignals_T_582 ? 3'h3 : {_GEN_15, 2'h0};
  assign io_illegal =
    ~(_ctrlSignals_T_1 | _ctrlSignals_T_3 | _ctrlSignals_T_5 | _ctrlSignals_T_7
      | _ctrlSignals_T_9 | _ctrlSignals_T_11 | _ctrlSignals_T_13 | _ctrlSignals_T_15
      | _ctrlSignals_T_17 | _ctrlSignals_T_19 | _ctrlSignals_T_21 | _ctrlSignals_T_23
      | _ctrlSignals_T_25 | _ctrlSignals_T_27 | _ctrlSignals_T_29 | _ctrlSignals_T_31
      | _ctrlSignals_T_33 | _ctrlSignals_T_35 | _ctrlSignals_T_37 | _ctrlSignals_T_39
      | _ctrlSignals_T_41 | _ctrlSignals_T_43 | _ctrlSignals_T_45 | _ctrlSignals_T_47
      | _ctrlSignals_T_49 | _ctrlSignals_T_51 | _ctrlSignals_T_53 | _ctrlSignals_T_55
      | _ctrlSignals_T_57 | _ctrlSignals_T_59 | _ctrlSignals_T_61 | _ctrlSignals_T_63
      | _ctrlSignals_T_65 | _ctrlSignals_T_67 | _ctrlSignals_T_69 | _ctrlSignals_T_71
      | _ctrlSignals_T_206 | _ctrlSignals_T_75 | _ctrlSignals_T_77 | _GEN_16)
    & io_inst != 32'h10200073;
endmodule

module Core(
  input         clock,
  input         reset,
  input         io_host_fromhost_valid,
  input  [31:0] io_host_fromhost_bits,
  output [31:0] io_host_tohost,
  output        io_icache_req_valid,
  output [31:0] io_icache_req_bits_addr,
  input         io_icache_resp_valid,
  input  [31:0] io_icache_resp_bits_data,
  output        io_dcache_abort,
  output        io_dcache_req_valid,
  output [31:0] io_dcache_req_bits_addr,
  output [31:0] io_dcache_req_bits_data,
  output [3:0]  io_dcache_req_bits_mask,
  input         io_dcache_resp_valid,
  input  [31:0] io_dcache_resp_bits_data
);

  wire [1:0]  _ctrl_io_pc_sel;
  wire        _ctrl_io_inst_kill;
  wire        _ctrl_io_A_sel;
  wire        _ctrl_io_B_sel;
  wire [2:0]  _ctrl_io_imm_sel;
  wire [3:0]  _ctrl_io_alu_op;
  wire [2:0]  _ctrl_io_br_type;
  wire [1:0]  _ctrl_io_st_type;
  wire [2:0]  _ctrl_io_ld_type;
  wire [1:0]  _ctrl_io_wb_sel;
  wire        _ctrl_io_wb_en;
  wire [2:0]  _ctrl_io_csr_cmd;
  wire        _ctrl_io_illegal;
  wire [31:0] _dpath_io_ctrl_inst;
  Datapath dpath (
    .clock                    (clock),
    .reset                    (reset),
    .io_host_fromhost_valid   (io_host_fromhost_valid),
    .io_host_fromhost_bits    (io_host_fromhost_bits),
    .io_host_tohost           (io_host_tohost),
    .io_icache_req_valid      (io_icache_req_valid),
    .io_icache_req_bits_addr  (io_icache_req_bits_addr),
    .io_icache_resp_valid     (io_icache_resp_valid),
    .io_icache_resp_bits_data (io_icache_resp_bits_data),
    .io_dcache_abort          (io_dcache_abort),
    .io_dcache_req_valid      (io_dcache_req_valid),
    .io_dcache_req_bits_addr  (io_dcache_req_bits_addr),
    .io_dcache_req_bits_data  (io_dcache_req_bits_data),
    .io_dcache_req_bits_mask  (io_dcache_req_bits_mask),
    .io_dcache_resp_valid     (io_dcache_resp_valid),
    .io_dcache_resp_bits_data (io_dcache_resp_bits_data),
    .io_ctrl_inst             (_dpath_io_ctrl_inst),
    .io_ctrl_pc_sel           (_ctrl_io_pc_sel),
    .io_ctrl_inst_kill        (_ctrl_io_inst_kill),
    .io_ctrl_A_sel            (_ctrl_io_A_sel),
    .io_ctrl_B_sel            (_ctrl_io_B_sel),
    .io_ctrl_imm_sel          (_ctrl_io_imm_sel),
    .io_ctrl_alu_op           (_ctrl_io_alu_op),
    .io_ctrl_br_type          (_ctrl_io_br_type),
    .io_ctrl_st_type          (_ctrl_io_st_type),
    .io_ctrl_ld_type          (_ctrl_io_ld_type),
    .io_ctrl_wb_sel           (_ctrl_io_wb_sel),
    .io_ctrl_wb_en            (_ctrl_io_wb_en),
    .io_ctrl_csr_cmd          (_ctrl_io_csr_cmd),
    .io_ctrl_illegal          (_ctrl_io_illegal)
  );
  Control ctrl (
    .io_inst      (_dpath_io_ctrl_inst),
    .io_pc_sel    (_ctrl_io_pc_sel),
    .io_inst_kill (_ctrl_io_inst_kill),
    .io_A_sel     (_ctrl_io_A_sel),
    .io_B_sel     (_ctrl_io_B_sel),
    .io_imm_sel   (_ctrl_io_imm_sel),
    .io_alu_op    (_ctrl_io_alu_op),
    .io_br_type   (_ctrl_io_br_type),
    .io_st_type   (_ctrl_io_st_type),
    .io_ld_type   (_ctrl_io_ld_type),
    .io_wb_sel    (_ctrl_io_wb_sel),
    .io_wb_en     (_ctrl_io_wb_en),
    .io_csr_cmd   (_ctrl_io_csr_cmd),
    .io_illegal   (_ctrl_io_illegal)
  );
endmodule

// VCS coverage exclude_file
module metaMem_tag_256x20(
  input  [7:0]  RW0_addr,
  input         RW0_en,
  input         RW0_clk,
  input         RW0_wmode,
  input  [19:0] RW0_wdata,
  output [19:0] RW0_rdata
);

  reg [19:0] Memory[0:255];
  reg [7:0]  _RW0_raddr_d0;
  reg        _RW0_ren_d0;
  reg        _RW0_rmode_d0;
  always @(posedge RW0_clk) begin
    _RW0_raddr_d0 <= RW0_addr;
    _RW0_ren_d0 <= RW0_en;
    _RW0_rmode_d0 <= RW0_wmode;
    if (RW0_en & RW0_wmode & 1'h1)
      Memory[RW0_addr] <= RW0_wdata;
  end // always @(posedge)
  assign RW0_rdata = _RW0_ren_d0 & ~_RW0_rmode_d0 ? Memory[_RW0_raddr_d0] : 20'bx;
endmodule

// VCS coverage exclude_file
module dataMem_256x32(
  input  [7:0]  RW0_addr,
  input         RW0_en,
  input         RW0_clk,
  input         RW0_wmode,
  input  [31:0] RW0_wdata,
  output [31:0] RW0_rdata,
  input  [3:0]  RW0_wmask
);

  reg [31:0] Memory[0:255];
  reg [7:0]  _RW0_raddr_d0;
  reg        _RW0_ren_d0;
  reg        _RW0_rmode_d0;
  always @(posedge RW0_clk) begin
    _RW0_raddr_d0 <= RW0_addr;
    _RW0_ren_d0 <= RW0_en;
    _RW0_rmode_d0 <= RW0_wmode;
    if (RW0_en & RW0_wmask[0] & RW0_wmode)
      Memory[RW0_addr][32'h0 +: 8] <= RW0_wdata[7:0];
    if (RW0_en & RW0_wmask[1] & RW0_wmode)
      Memory[RW0_addr][32'h8 +: 8] <= RW0_wdata[15:8];
    if (RW0_en & RW0_wmask[2] & RW0_wmode)
      Memory[RW0_addr][32'h10 +: 8] <= RW0_wdata[23:16];
    if (RW0_en & RW0_wmask[3] & RW0_wmode)
      Memory[RW0_addr][32'h18 +: 8] <= RW0_wdata[31:24];
  end // always @(posedge)
  assign RW0_rdata = _RW0_ren_d0 & ~_RW0_rmode_d0 ? Memory[_RW0_raddr_d0] : 32'bx;
endmodule

module Cache(
  input         clock,
  input         reset,
  input         io_cpu_abort,
  input         io_cpu_req_valid,
  input  [31:0] io_cpu_req_bits_addr,
  input  [31:0] io_cpu_req_bits_data,
  input  [3:0]  io_cpu_req_bits_mask,
  output        io_cpu_resp_valid,
  output [31:0] io_cpu_resp_bits_data,
  input         io_nasti_aw_ready,
  output        io_nasti_aw_valid,
  output [31:0] io_nasti_aw_bits_addr,
  input         io_nasti_w_ready,
  output        io_nasti_w_valid,
  output [63:0] io_nasti_w_bits_data,
  output        io_nasti_w_bits_last,
  output        io_nasti_b_ready,
  input         io_nasti_b_valid,
  input         io_nasti_ar_ready,
  output        io_nasti_ar_valid,
  output [31:0] io_nasti_ar_bits_addr,
  output        io_nasti_r_ready,
  input         io_nasti_r_valid,
  input  [63:0] io_nasti_r_bits_data
);

  wire         io_nasti_w_valid_0;
  wire         writeEnable;
  wire [127:0] wdata;
  wire [15:0]  wmask;
  wire         hit;
  wire [7:0]   writeAddr;
  wire [7:0]   idx;
  wire         ren;
  wire         wen;
  wire         io_nasti_r_ready_0;
  wire [31:0]  _dataMem_3_ext_RW0_rdata;
  wire [31:0]  _dataMem_2_ext_RW0_rdata;
  wire [31:0]  _dataMem_1_ext_RW0_rdata;
  wire [31:0]  _dataMem_0_ext_RW0_rdata;
  wire [19:0]  _metaMem_tag_ext_RW0_rdata;
  reg  [2:0]   state;
  reg  [255:0] v;
  reg  [255:0] d;
  wire [7:0]   _GEN = wen ? writeAddr : idx;
  wire         _GEN_0 = ren | wen;
  reg  [31:0]  addr_reg;
  reg  [31:0]  cpu_data;
  reg  [3:0]   cpu_mask;
  wire         _GEN_1 = io_nasti_r_ready_0 & io_nasti_r_valid;
  reg          wrap_wrap;
  wire         read_wrap_out = _GEN_1 & wrap_wrap;
  wire         _GEN_2 = io_nasti_w_ready & io_nasti_w_valid_0;
  reg          write_count;
  wire         write_wrap_out = _GEN_2 & write_count;
  wire         is_read = state == 3'h1;
  assign io_nasti_r_ready_0 = state == 3'h6;
  wire         is_alloc = io_nasti_r_ready_0 & read_wrap_out;
  reg          is_alloc_reg;
  wire         _wen_T = hit | is_alloc_reg;
  assign wen = state == 3'h2 & _wen_T & ~io_cpu_abort | is_alloc;
  assign ren = ~wen & (~(|state) | is_read) & io_cpu_req_valid;
  reg          ren_reg;
  assign idx = io_cpu_req_bits_addr[11:4];
  assign writeAddr = addr_reg[11:4];
  wire [127:0] rdata =
    {_dataMem_3_ext_RW0_rdata,
     _dataMem_2_ext_RW0_rdata,
     _dataMem_1_ext_RW0_rdata,
     _dataMem_0_ext_RW0_rdata};
  reg  [127:0] rdata_buf;
  reg  [63:0]  refill_buf_0;
  reg  [63:0]  refill_buf_1;
  wire [127:0] read =
    is_alloc_reg ? {refill_buf_1, refill_buf_0} : ren_reg ? rdata : rdata_buf;
  wire [255:0] _GEN_3 = {248'h0, writeAddr};
  wire [255:0] _is_dirty_T = v >> _GEN_3;
  assign hit = _is_dirty_T[0] & _metaMem_tag_ext_RW0_rdata == addr_reg[31:12];
  reg  [31:0]  casez_tmp;
  always @(*) begin
    casez (addr_reg[3:2])
      2'b00:
        casez_tmp = read[31:0];
      2'b01:
        casez_tmp = read[63:32];
      2'b10:
        casez_tmp = read[95:64];
      default:
        casez_tmp = read[127:96];
    endcase
  end // always @(*)
  wire         io_cpu_resp_valid_0 =
    ~(|state) | is_read & hit | is_alloc_reg & ~(|cpu_mask);
  wire [18:0]  _wmask_T_2 = {15'h0, cpu_mask} << {15'h0, addr_reg[3:2], 2'h0};
  assign wmask = is_alloc ? 16'hFFFF : _wmask_T_2[15:0];
  assign wdata = is_alloc ? {io_nasti_r_bits_data, refill_buf_0} : {2{{2{cpu_data}}}};
  assign writeEnable = wen & is_alloc;
  wire [255:0] _is_dirty_T_2 = d >> _GEN_3;
  wire         is_dirty = _is_dirty_T[0] & _is_dirty_T_2[0];
  wire         _GEN_4 = state == 3'h1;
  wire         _GEN_5 = state == 3'h2;
  wire         _GEN_6 = _wen_T | io_cpu_abort;
  wire         io_nasti_aw_valid_0 =
    (|state) & (_GEN_4 ? ~hit & is_dirty : _GEN_5 & ~_GEN_6 & is_dirty);
  wire         _GEN_7 = state == 3'h3;
  wire         _GEN_8 = ~(|state) | _GEN_4 | _GEN_5;
  assign io_nasti_w_valid_0 = ~_GEN_8 & _GEN_7;
  wire         _GEN_9 = state == 3'h4;
  wire         io_nasti_b_ready_0 = ~(_GEN_8 | _GEN_7) & _GEN_9;
  wire         io_nasti_ar_valid_0 =
    (|state)
    & (_GEN_4
         ? ~hit & ~is_dirty
         : _GEN_5 ? ~_GEN_6 & ~is_dirty : ~(_GEN_7 | _GEN_9) & state == 3'h5);
  reg  [2:0]   casez_tmp_0;
  wire [2:0]   _GEN_10 = io_nasti_ar_ready & io_nasti_ar_valid_0 ? 3'h6 : state;
  wire [2:0]   _GEN_11 = io_nasti_aw_ready & io_nasti_aw_valid_0 ? 3'h3 : _GEN_10;
  wire [2:0]   _GEN_12 = state == 3'h6 & read_wrap_out ? {1'h0, |cpu_mask, 1'h0} : state;
  always @(*) begin
    casez (state)
      3'b000:
        casez_tmp_0 = _GEN_12;
      3'b001:
        casez_tmp_0 =
          hit
            ? (io_cpu_req_valid ? {1'h0, (|io_cpu_req_bits_mask) ? 2'h2 : 2'h1} : 3'h0)
            : _GEN_11;
      3'b010:
        casez_tmp_0 = _GEN_6 ? 3'h0 : _GEN_11;
      3'b011:
        casez_tmp_0 = write_wrap_out ? 3'h4 : state;
      3'b100:
        casez_tmp_0 = io_nasti_b_ready_0 & io_nasti_b_valid ? 3'h5 : state;
      3'b101:
        casez_tmp_0 = _GEN_10;
      3'b110:
        casez_tmp_0 = _GEN_12;
      default:
        casez_tmp_0 = _GEN_12;
    endcase
  end // always @(*)
  wire [255:0] _d_T_1 = 256'h1 << _GEN_3;
  always @(posedge clock) begin
    if (reset) begin
      state <= 3'h0;
      v <= 256'h0;
      d <= 256'h0;
      wrap_wrap <= 1'h0;
      write_count <= 1'h0;
    end
    else begin
      if (|state)
        state <= casez_tmp_0;
      else if (io_cpu_req_valid)
        state <= {1'h0, (|io_cpu_req_bits_mask) ? 2'h2 : 2'h1};
      v <= {256{wen}} & _d_T_1 | v;
      if (wen) begin
        if (is_alloc)
          d <= ~(~d | _d_T_1);
        else
          d <= d | _d_T_1;
      end
      if (_GEN_1)
        wrap_wrap <= wrap_wrap - 1'h1;
      if (_GEN_2)
        write_count <= write_count - 1'h1;
    end
    if (io_cpu_resp_valid_0) begin
      addr_reg <= io_cpu_req_bits_addr;
      cpu_data <= io_cpu_req_bits_data;
      cpu_mask <= io_cpu_req_bits_mask;
    end
    is_alloc_reg <= is_alloc;
    ren_reg <= ren;
    if (ren_reg)
      rdata_buf <= rdata;
    if (_GEN_1 & ~wrap_wrap)
      refill_buf_0 <= io_nasti_r_bits_data;
    if (_GEN_1 & wrap_wrap)
      refill_buf_1 <= io_nasti_r_bits_data;
  end // always @(posedge)
  metaMem_tag_256x20 metaMem_tag_ext (
    .RW0_addr  (writeEnable ? writeAddr : idx),
    .RW0_en    (ren | writeEnable),
    .RW0_clk   (clock),
    .RW0_wmode (wen),
    .RW0_wdata (addr_reg[31:12]),
    .RW0_rdata (_metaMem_tag_ext_RW0_rdata)
  );
  dataMem_256x32 dataMem_0_ext (
    .RW0_addr  (_GEN),
    .RW0_en    (_GEN_0),
    .RW0_clk   (clock),
    .RW0_wmode (wen),
    .RW0_wdata (wdata[31:0]),
    .RW0_rdata (_dataMem_0_ext_RW0_rdata),
    .RW0_wmask (wmask[3:0])
  );
  dataMem_256x32 dataMem_1_ext (
    .RW0_addr  (_GEN),
    .RW0_en    (_GEN_0),
    .RW0_clk   (clock),
    .RW0_wmode (wen),
    .RW0_wdata (wdata[63:32]),
    .RW0_rdata (_dataMem_1_ext_RW0_rdata),
    .RW0_wmask (wmask[7:4])
  );
  dataMem_256x32 dataMem_2_ext (
    .RW0_addr  (_GEN),
    .RW0_en    (_GEN_0),
    .RW0_clk   (clock),
    .RW0_wmode (wen),
    .RW0_wdata (wdata[95:64]),
    .RW0_rdata (_dataMem_2_ext_RW0_rdata),
    .RW0_wmask (wmask[11:8])
  );
  dataMem_256x32 dataMem_3_ext (
    .RW0_addr  (_GEN),
    .RW0_en    (_GEN_0),
    .RW0_clk   (clock),
    .RW0_wmode (wen),
    .RW0_wdata (wdata[127:96]),
    .RW0_rdata (_dataMem_3_ext_RW0_rdata),
    .RW0_wmask (wmask[15:12])
  );
  assign io_cpu_resp_valid = io_cpu_resp_valid_0;
  assign io_cpu_resp_bits_data = casez_tmp;
  assign io_nasti_aw_valid = io_nasti_aw_valid_0;
  assign io_nasti_aw_bits_addr = {_metaMem_tag_ext_RW0_rdata, writeAddr, 4'h0};
  assign io_nasti_w_valid = io_nasti_w_valid_0;
  assign io_nasti_w_bits_data = write_count ? read[127:64] : read[63:0];
  assign io_nasti_w_bits_last = write_wrap_out;
  assign io_nasti_b_ready = io_nasti_b_ready_0;
  assign io_nasti_ar_valid = io_nasti_ar_valid_0;
  assign io_nasti_ar_bits_addr = {addr_reg[31:4], 4'h0};
  assign io_nasti_r_ready = io_nasti_r_ready_0;
endmodule

module MemArbiter(
  input         clock,
  input         reset,
  output        io_icache_ar_ready,
  input         io_icache_ar_valid,
  input  [31:0] io_icache_ar_bits_addr,
  input         io_icache_r_ready,
  output        io_icache_r_valid,
  output [63:0] io_icache_r_bits_data,
  output        io_dcache_aw_ready,
  input         io_dcache_aw_valid,
  input  [31:0] io_dcache_aw_bits_addr,
  output        io_dcache_w_ready,
  input         io_dcache_w_valid,
  input  [63:0] io_dcache_w_bits_data,
  input         io_dcache_w_bits_last,
  input         io_dcache_b_ready,
  output        io_dcache_b_valid,
  output        io_dcache_ar_ready,
  input         io_dcache_ar_valid,
  input  [31:0] io_dcache_ar_bits_addr,
  input         io_dcache_r_ready,
  output        io_dcache_r_valid,
  output [63:0] io_dcache_r_bits_data,
  input         io_nasti_aw_ready,
  output        io_nasti_aw_valid,
  output [31:0] io_nasti_aw_bits_addr,
  input         io_nasti_w_ready,
  output        io_nasti_w_valid,
  output [63:0] io_nasti_w_bits_data,
  output        io_nasti_w_bits_last,
  output        io_nasti_b_ready,
  input         io_nasti_b_valid,
  input         io_nasti_ar_ready,
  output        io_nasti_ar_valid,
  output [31:0] io_nasti_ar_bits_addr,
  output        io_nasti_r_ready,
  input         io_nasti_r_valid,
  input  [63:0] io_nasti_r_bits_data,
  input         io_nasti_r_bits_last
);

  reg  [2:0] state;
  wire       io_nasti_aw_valid_0 = io_dcache_aw_valid & ~(|state);
  wire       io_dcache_aw_ready_0 = io_nasti_aw_ready & ~(|state);
  wire       _io_dcache_w_ready_T = state == 3'h3;
  wire       io_dcache_w_ready_0 = io_nasti_w_ready & _io_dcache_w_ready_T;
  wire       _io_nasti_b_ready_T = state == 3'h4;
  wire       io_nasti_b_ready_0 = io_dcache_b_ready & _io_nasti_b_ready_T;
  wire       io_dcache_ar_ready_0 = io_nasti_ar_ready & ~io_nasti_aw_valid_0 & ~(|state);
  wire       io_icache_ar_ready_0 = io_dcache_ar_ready_0 & ~io_dcache_ar_valid;
  wire       _io_nasti_r_ready_T = state == 3'h1;
  wire       _io_nasti_r_ready_T_2 = state == 3'h2;
  wire       io_nasti_r_ready_0 =
    io_icache_r_ready & _io_nasti_r_ready_T | io_dcache_r_ready & _io_nasti_r_ready_T_2;
  always @(posedge clock) begin
    if (reset)
      state <= 3'h0;
    else if (|state) begin
      if (state == 3'h1 | state == 3'h2) begin
        if (io_nasti_r_ready_0 & io_nasti_r_valid & io_nasti_r_bits_last)
          state <= 3'h0;
      end
      else if (state == 3'h3) begin
        if (io_dcache_w_ready_0 & io_dcache_w_valid & io_dcache_w_bits_last)
          state <= 3'h4;
      end
      else if (state == 3'h4 & io_nasti_b_ready_0 & io_nasti_b_valid)
        state <= 3'h0;
    end
    else if (io_dcache_aw_ready_0 & io_dcache_aw_valid)
      state <= 3'h3;
    else if (io_dcache_ar_ready_0 & io_dcache_ar_valid)
      state <= 3'h2;
    else if (io_icache_ar_ready_0 & io_icache_ar_valid)
      state <= 3'h1;
  end // always @(posedge)
  assign io_icache_ar_ready = io_icache_ar_ready_0;
  assign io_icache_r_valid = io_nasti_r_valid & _io_nasti_r_ready_T;
  assign io_icache_r_bits_data = io_nasti_r_bits_data;
  assign io_dcache_aw_ready = io_dcache_aw_ready_0;
  assign io_dcache_w_ready = io_dcache_w_ready_0;
  assign io_dcache_b_valid = io_nasti_b_valid & _io_nasti_b_ready_T;
  assign io_dcache_ar_ready = io_dcache_ar_ready_0;
  assign io_dcache_r_valid = io_nasti_r_valid & _io_nasti_r_ready_T_2;
  assign io_dcache_r_bits_data = io_nasti_r_bits_data;
  assign io_nasti_aw_valid = io_nasti_aw_valid_0;
  assign io_nasti_aw_bits_addr = io_dcache_aw_bits_addr;
  assign io_nasti_w_valid = io_dcache_w_valid & _io_dcache_w_ready_T;
  assign io_nasti_w_bits_data = io_dcache_w_bits_data;
  assign io_nasti_w_bits_last = io_dcache_w_bits_last;
  assign io_nasti_b_ready = io_nasti_b_ready_0;
  assign io_nasti_ar_valid =
    (io_icache_ar_valid | io_dcache_ar_valid) & ~io_nasti_aw_valid_0 & ~(|state);
  assign io_nasti_ar_bits_addr =
    io_dcache_ar_valid ? io_dcache_ar_bits_addr : io_icache_ar_bits_addr;
  assign io_nasti_r_ready = io_nasti_r_ready_0;
endmodule

module Tile(
  input         clock,
  input         reset,
  input         io_host_fromhost_valid,
  input  [31:0] io_host_fromhost_bits,
  output [31:0] io_host_tohost,
  input         io_nasti_aw_ready,
  output        io_nasti_aw_valid,
  output [4:0]  io_nasti_aw_bits_id,
  output [31:0] io_nasti_aw_bits_addr,
  output [7:0]  io_nasti_aw_bits_len,
  output [2:0]  io_nasti_aw_bits_size,
  output [1:0]  io_nasti_aw_bits_burst,
  output        io_nasti_aw_bits_lock,
  output [3:0]  io_nasti_aw_bits_cache,
  output [2:0]  io_nasti_aw_bits_prot,
  output [3:0]  io_nasti_aw_bits_qos,
  input         io_nasti_w_ready,
  output        io_nasti_w_valid,
  output [63:0] io_nasti_w_bits_data,
  output [7:0]  io_nasti_w_bits_strb,
  output        io_nasti_w_bits_last,
  output        io_nasti_b_ready,
  input         io_nasti_b_valid,
  input  [4:0]  io_nasti_b_bits_id,
  input  [1:0]  io_nasti_b_bits_resp,
  input         io_nasti_ar_ready,
  output        io_nasti_ar_valid,
  output [4:0]  io_nasti_ar_bits_id,
  output [31:0] io_nasti_ar_bits_addr,
  output [7:0]  io_nasti_ar_bits_len,
  output [2:0]  io_nasti_ar_bits_size,
  output [1:0]  io_nasti_ar_bits_burst,
  output        io_nasti_ar_bits_lock,
  output [3:0]  io_nasti_ar_bits_cache,
  output [2:0]  io_nasti_ar_bits_prot,
  output [3:0]  io_nasti_ar_bits_qos,
  output        io_nasti_r_ready,
  input         io_nasti_r_valid,
  input  [4:0]  io_nasti_r_bits_id,
  input  [63:0] io_nasti_r_bits_data,
  input  [1:0]  io_nasti_r_bits_resp,
  input         io_nasti_r_bits_last
);

  wire        _arb_io_icache_ar_ready;
  wire        _arb_io_icache_r_valid;
  wire [63:0] _arb_io_icache_r_bits_data;
  wire        _arb_io_dcache_aw_ready;
  wire        _arb_io_dcache_w_ready;
  wire        _arb_io_dcache_b_valid;
  wire        _arb_io_dcache_ar_ready;
  wire        _arb_io_dcache_r_valid;
  wire [63:0] _arb_io_dcache_r_bits_data;
  wire        _dcache_io_cpu_resp_valid;
  wire [31:0] _dcache_io_cpu_resp_bits_data;
  wire        _dcache_io_nasti_aw_valid;
  wire [31:0] _dcache_io_nasti_aw_bits_addr;
  wire        _dcache_io_nasti_w_valid;
  wire [63:0] _dcache_io_nasti_w_bits_data;
  wire        _dcache_io_nasti_w_bits_last;
  wire        _dcache_io_nasti_b_ready;
  wire        _dcache_io_nasti_ar_valid;
  wire [31:0] _dcache_io_nasti_ar_bits_addr;
  wire        _dcache_io_nasti_r_ready;
  wire        _icache_io_cpu_resp_valid;
  wire [31:0] _icache_io_cpu_resp_bits_data;
  wire        _icache_io_nasti_ar_valid;
  wire [31:0] _icache_io_nasti_ar_bits_addr;
  wire        _icache_io_nasti_r_ready;
  wire        _core_io_icache_req_valid;
  wire [31:0] _core_io_icache_req_bits_addr;
  wire        _core_io_dcache_abort;
  wire        _core_io_dcache_req_valid;
  wire [31:0] _core_io_dcache_req_bits_addr;
  wire [31:0] _core_io_dcache_req_bits_data;
  wire [3:0]  _core_io_dcache_req_bits_mask;
  Core core (
    .clock                    (clock),
    .reset                    (reset),
    .io_host_fromhost_valid   (io_host_fromhost_valid),
    .io_host_fromhost_bits    (io_host_fromhost_bits),
    .io_host_tohost           (io_host_tohost),
    .io_icache_req_valid      (_core_io_icache_req_valid),
    .io_icache_req_bits_addr  (_core_io_icache_req_bits_addr),
    .io_icache_resp_valid     (_icache_io_cpu_resp_valid),
    .io_icache_resp_bits_data (_icache_io_cpu_resp_bits_data),
    .io_dcache_abort          (_core_io_dcache_abort),
    .io_dcache_req_valid      (_core_io_dcache_req_valid),
    .io_dcache_req_bits_addr  (_core_io_dcache_req_bits_addr),
    .io_dcache_req_bits_data  (_core_io_dcache_req_bits_data),
    .io_dcache_req_bits_mask  (_core_io_dcache_req_bits_mask),
    .io_dcache_resp_valid     (_dcache_io_cpu_resp_valid),
    .io_dcache_resp_bits_data (_dcache_io_cpu_resp_bits_data)
  );
  Cache icache (
    .clock                 (clock),
    .reset                 (reset),
    .io_cpu_abort          (1'h0),
    .io_cpu_req_valid      (_core_io_icache_req_valid),
    .io_cpu_req_bits_addr  (_core_io_icache_req_bits_addr),
    .io_cpu_req_bits_data  (32'h0),
    .io_cpu_req_bits_mask  (4'h0),
    .io_cpu_resp_valid     (_icache_io_cpu_resp_valid),
    .io_cpu_resp_bits_data (_icache_io_cpu_resp_bits_data),
    .io_nasti_aw_ready     (1'h0),
    .io_nasti_aw_valid     (/* unused */),
    .io_nasti_aw_bits_addr (/* unused */),
    .io_nasti_w_ready      (1'h0),
    .io_nasti_w_valid      (/* unused */),
    .io_nasti_w_bits_data  (/* unused */),
    .io_nasti_w_bits_last  (/* unused */),
    .io_nasti_b_ready      (/* unused */),
    .io_nasti_b_valid      (1'h0),
    .io_nasti_ar_ready     (_arb_io_icache_ar_ready),
    .io_nasti_ar_valid     (_icache_io_nasti_ar_valid),
    .io_nasti_ar_bits_addr (_icache_io_nasti_ar_bits_addr),
    .io_nasti_r_ready      (_icache_io_nasti_r_ready),
    .io_nasti_r_valid      (_arb_io_icache_r_valid),
    .io_nasti_r_bits_data  (_arb_io_icache_r_bits_data)
  );
  Cache dcache (
    .clock                 (clock),
    .reset                 (reset),
    .io_cpu_abort          (_core_io_dcache_abort),
    .io_cpu_req_valid      (_core_io_dcache_req_valid),
    .io_cpu_req_bits_addr  (_core_io_dcache_req_bits_addr),
    .io_cpu_req_bits_data  (_core_io_dcache_req_bits_data),
    .io_cpu_req_bits_mask  (_core_io_dcache_req_bits_mask),
    .io_cpu_resp_valid     (_dcache_io_cpu_resp_valid),
    .io_cpu_resp_bits_data (_dcache_io_cpu_resp_bits_data),
    .io_nasti_aw_ready     (_arb_io_dcache_aw_ready),
    .io_nasti_aw_valid     (_dcache_io_nasti_aw_valid),
    .io_nasti_aw_bits_addr (_dcache_io_nasti_aw_bits_addr),
    .io_nasti_w_ready      (_arb_io_dcache_w_ready),
    .io_nasti_w_valid      (_dcache_io_nasti_w_valid),
    .io_nasti_w_bits_data  (_dcache_io_nasti_w_bits_data),
    .io_nasti_w_bits_last  (_dcache_io_nasti_w_bits_last),
    .io_nasti_b_ready      (_dcache_io_nasti_b_ready),
    .io_nasti_b_valid      (_arb_io_dcache_b_valid),
    .io_nasti_ar_ready     (_arb_io_dcache_ar_ready),
    .io_nasti_ar_valid     (_dcache_io_nasti_ar_valid),
    .io_nasti_ar_bits_addr (_dcache_io_nasti_ar_bits_addr),
    .io_nasti_r_ready      (_dcache_io_nasti_r_ready),
    .io_nasti_r_valid      (_arb_io_dcache_r_valid),
    .io_nasti_r_bits_data  (_arb_io_dcache_r_bits_data)
  );
  MemArbiter arb (
    .clock                  (clock),
    .reset                  (reset),
    .io_icache_ar_ready     (_arb_io_icache_ar_ready),
    .io_icache_ar_valid     (_icache_io_nasti_ar_valid),
    .io_icache_ar_bits_addr (_icache_io_nasti_ar_bits_addr),
    .io_icache_r_ready      (_icache_io_nasti_r_ready),
    .io_icache_r_valid      (_arb_io_icache_r_valid),
    .io_icache_r_bits_data  (_arb_io_icache_r_bits_data),
    .io_dcache_aw_ready     (_arb_io_dcache_aw_ready),
    .io_dcache_aw_valid     (_dcache_io_nasti_aw_valid),
    .io_dcache_aw_bits_addr (_dcache_io_nasti_aw_bits_addr),
    .io_dcache_w_ready      (_arb_io_dcache_w_ready),
    .io_dcache_w_valid      (_dcache_io_nasti_w_valid),
    .io_dcache_w_bits_data  (_dcache_io_nasti_w_bits_data),
    .io_dcache_w_bits_last  (_dcache_io_nasti_w_bits_last),
    .io_dcache_b_ready      (_dcache_io_nasti_b_ready),
    .io_dcache_b_valid      (_arb_io_dcache_b_valid),
    .io_dcache_ar_ready     (_arb_io_dcache_ar_ready),
    .io_dcache_ar_valid     (_dcache_io_nasti_ar_valid),
    .io_dcache_ar_bits_addr (_dcache_io_nasti_ar_bits_addr),
    .io_dcache_r_ready      (_dcache_io_nasti_r_ready),
    .io_dcache_r_valid      (_arb_io_dcache_r_valid),
    .io_dcache_r_bits_data  (_arb_io_dcache_r_bits_data),
    .io_nasti_aw_ready      (io_nasti_aw_ready),
    .io_nasti_aw_valid      (io_nasti_aw_valid),
    .io_nasti_aw_bits_addr  (io_nasti_aw_bits_addr),
    .io_nasti_w_ready       (io_nasti_w_ready),
    .io_nasti_w_valid       (io_nasti_w_valid),
    .io_nasti_w_bits_data   (io_nasti_w_bits_data),
    .io_nasti_w_bits_last   (io_nasti_w_bits_last),
    .io_nasti_b_ready       (io_nasti_b_ready),
    .io_nasti_b_valid       (io_nasti_b_valid),
    .io_nasti_ar_ready      (io_nasti_ar_ready),
    .io_nasti_ar_valid      (io_nasti_ar_valid),
    .io_nasti_ar_bits_addr  (io_nasti_ar_bits_addr),
    .io_nasti_r_ready       (io_nasti_r_ready),
    .io_nasti_r_valid       (io_nasti_r_valid),
    .io_nasti_r_bits_data   (io_nasti_r_bits_data),
    .io_nasti_r_bits_last   (io_nasti_r_bits_last)
  );
  assign io_nasti_aw_bits_id = 5'h0;
  assign io_nasti_aw_bits_len = 8'h1;
  assign io_nasti_aw_bits_size = 3'h3;
  assign io_nasti_aw_bits_burst = 2'h1;
  assign io_nasti_aw_bits_lock = 1'h0;
  assign io_nasti_aw_bits_cache = 4'h0;
  assign io_nasti_aw_bits_prot = 3'h0;
  assign io_nasti_aw_bits_qos = 4'h0;
  assign io_nasti_w_bits_strb = 8'hFF;
  assign io_nasti_ar_bits_id = 5'h0;
  assign io_nasti_ar_bits_len = 8'h1;
  assign io_nasti_ar_bits_size = 3'h3;
  assign io_nasti_ar_bits_burst = 2'h1;
  assign io_nasti_ar_bits_lock = 1'h0;
  assign io_nasti_ar_bits_cache = 4'h0;
  assign io_nasti_ar_bits_prot = 3'h0;
  assign io_nasti_ar_bits_qos = 4'h0;
endmodule


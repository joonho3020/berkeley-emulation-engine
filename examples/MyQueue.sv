// Generated by CIRCT firtool-1.62.0
// VCS coverage exclude_file
module ram_4x5(
  input  [1:0] R0_addr,
  input        R0_en,
  input        R0_clk,
  output [4:0] R0_data,
  input  [1:0] W0_addr,
  input        W0_en,
  input        W0_clk,
  input  [4:0] W0_data
);

  reg [4:0] Memory[0:3];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 5'bx;
endmodule

module Queue4_MyBundle(
  input        clock,
  input        reset,
  output       io_enq_ready,
  input        io_enq_valid,
  input  [2:0] io_enq_bits_a,
  input  [1:0] io_enq_bits_b,
  input        io_deq_ready,
  output       io_deq_valid,
  output [2:0] io_deq_bits_a,
  output [1:0] io_deq_bits_b
);

  wire [4:0] _ram_ext_R0_data;
  reg  [1:0] enq_ptr_value;
  reg  [1:0] deq_ptr_value;
  reg        maybe_full;
  wire       ptr_match = enq_ptr_value == deq_ptr_value;
  wire       empty = ptr_match & ~maybe_full;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  wire       do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 2'h0;
      deq_ptr_value <= 2'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 2'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 2'h1;
      if (~(do_enq == do_deq))
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_4x5 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data ({io_enq_bits_b, io_enq_bits_a})
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_a = _ram_ext_R0_data[2:0];
  assign io_deq_bits_b = _ram_ext_R0_data[4:3];
endmodule

module MyQueue(
  input        clock,
  input        reset,
  output       io_in_ready,
  input        io_in_valid,
  input  [2:0] io_in_bits_a,
  input  [1:0] io_in_bits_b,
  input        io_out_ready,
  output       io_out_valid,
  output [2:0] io_out_bits_a,
  output [1:0] io_out_bits_b
);

  Queue4_MyBundle q (
    .clock         (clock),
    .reset         (reset),
    .io_enq_ready  (io_in_ready),
    .io_enq_valid  (io_in_valid),
    .io_enq_bits_a (io_in_bits_a),
    .io_enq_bits_b (io_in_bits_b),
    .io_deq_ready  (io_out_ready),
    .io_deq_valid  (io_out_valid),
    .io_deq_bits_a (io_out_bits_a),
    .io_deq_bits_b (io_out_bits_b)
  );
endmodule


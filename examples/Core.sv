// Generated by CIRCT firtool-1.62.0
module RegisterFile(
  input         clock,
  input         reset,
  input  [4:0]  io_rs1,
  input  [4:0]  io_rs2,
  output [63:0] io_rs1_out,
  output [63:0] io_rs2_out,
  input  [4:0]  io_rd,
  input  [63:0] io_wdata
);

  reg [63:0] regs_1;
  reg [63:0] regs_2;
  reg [63:0] regs_3;
  reg [63:0] regs_4;
  reg [63:0] regs_5;
  reg [63:0] regs_6;
  reg [63:0] regs_7;
  reg [63:0] regs_8;
  reg [63:0] regs_9;
  reg [63:0] regs_10;
  reg [63:0] regs_11;
  reg [63:0] regs_12;
  reg [63:0] regs_13;
  reg [63:0] regs_14;
  reg [63:0] regs_15;
  reg [63:0] regs_16;
  reg [63:0] regs_17;
  reg [63:0] regs_18;
  reg [63:0] regs_19;
  reg [63:0] regs_20;
  reg [63:0] regs_21;
  reg [63:0] regs_22;
  reg [63:0] regs_23;
  reg [63:0] regs_24;
  reg [63:0] regs_25;
  reg [63:0] regs_26;
  reg [63:0] regs_27;
  reg [63:0] regs_28;
  reg [63:0] regs_29;
  reg [63:0] regs_30;
  reg [63:0] regs_31;
  reg [63:0] casez_tmp;
  always @(*) begin
    casez (io_rs1)
      5'b00000:
        casez_tmp = 64'h0;
      5'b00001:
        casez_tmp = regs_1;
      5'b00010:
        casez_tmp = regs_2;
      5'b00011:
        casez_tmp = regs_3;
      5'b00100:
        casez_tmp = regs_4;
      5'b00101:
        casez_tmp = regs_5;
      5'b00110:
        casez_tmp = regs_6;
      5'b00111:
        casez_tmp = regs_7;
      5'b01000:
        casez_tmp = regs_8;
      5'b01001:
        casez_tmp = regs_9;
      5'b01010:
        casez_tmp = regs_10;
      5'b01011:
        casez_tmp = regs_11;
      5'b01100:
        casez_tmp = regs_12;
      5'b01101:
        casez_tmp = regs_13;
      5'b01110:
        casez_tmp = regs_14;
      5'b01111:
        casez_tmp = regs_15;
      5'b10000:
        casez_tmp = regs_16;
      5'b10001:
        casez_tmp = regs_17;
      5'b10010:
        casez_tmp = regs_18;
      5'b10011:
        casez_tmp = regs_19;
      5'b10100:
        casez_tmp = regs_20;
      5'b10101:
        casez_tmp = regs_21;
      5'b10110:
        casez_tmp = regs_22;
      5'b10111:
        casez_tmp = regs_23;
      5'b11000:
        casez_tmp = regs_24;
      5'b11001:
        casez_tmp = regs_25;
      5'b11010:
        casez_tmp = regs_26;
      5'b11011:
        casez_tmp = regs_27;
      5'b11100:
        casez_tmp = regs_28;
      5'b11101:
        casez_tmp = regs_29;
      5'b11110:
        casez_tmp = regs_30;
      default:
        casez_tmp = regs_31;
    endcase
  end // always @(*)
  reg [63:0] casez_tmp_0;
  always @(*) begin
    casez (io_rs2)
      5'b00000:
        casez_tmp_0 = 64'h0;
      5'b00001:
        casez_tmp_0 = regs_1;
      5'b00010:
        casez_tmp_0 = regs_2;
      5'b00011:
        casez_tmp_0 = regs_3;
      5'b00100:
        casez_tmp_0 = regs_4;
      5'b00101:
        casez_tmp_0 = regs_5;
      5'b00110:
        casez_tmp_0 = regs_6;
      5'b00111:
        casez_tmp_0 = regs_7;
      5'b01000:
        casez_tmp_0 = regs_8;
      5'b01001:
        casez_tmp_0 = regs_9;
      5'b01010:
        casez_tmp_0 = regs_10;
      5'b01011:
        casez_tmp_0 = regs_11;
      5'b01100:
        casez_tmp_0 = regs_12;
      5'b01101:
        casez_tmp_0 = regs_13;
      5'b01110:
        casez_tmp_0 = regs_14;
      5'b01111:
        casez_tmp_0 = regs_15;
      5'b10000:
        casez_tmp_0 = regs_16;
      5'b10001:
        casez_tmp_0 = regs_17;
      5'b10010:
        casez_tmp_0 = regs_18;
      5'b10011:
        casez_tmp_0 = regs_19;
      5'b10100:
        casez_tmp_0 = regs_20;
      5'b10101:
        casez_tmp_0 = regs_21;
      5'b10110:
        casez_tmp_0 = regs_22;
      5'b10111:
        casez_tmp_0 = regs_23;
      5'b11000:
        casez_tmp_0 = regs_24;
      5'b11001:
        casez_tmp_0 = regs_25;
      5'b11010:
        casez_tmp_0 = regs_26;
      5'b11011:
        casez_tmp_0 = regs_27;
      5'b11100:
        casez_tmp_0 = regs_28;
      5'b11101:
        casez_tmp_0 = regs_29;
      5'b11110:
        casez_tmp_0 = regs_30;
      default:
        casez_tmp_0 = regs_31;
    endcase
  end // always @(*)
  always @(posedge clock) begin
    if (reset) begin
      regs_1 <= 64'h0;
      regs_2 <= 64'h0;
      regs_3 <= 64'h0;
      regs_4 <= 64'h0;
      regs_5 <= 64'h0;
      regs_6 <= 64'h0;
      regs_7 <= 64'h0;
      regs_8 <= 64'h0;
      regs_9 <= 64'h0;
      regs_10 <= 64'h0;
      regs_11 <= 64'h0;
      regs_12 <= 64'h0;
      regs_13 <= 64'h0;
      regs_14 <= 64'h0;
      regs_15 <= 64'h0;
      regs_16 <= 64'h0;
      regs_17 <= 64'h0;
      regs_18 <= 64'h0;
      regs_19 <= 64'h0;
      regs_20 <= 64'h0;
      regs_21 <= 64'h0;
      regs_22 <= 64'h0;
      regs_23 <= 64'h0;
      regs_24 <= 64'h0;
      regs_25 <= 64'h0;
      regs_26 <= 64'h0;
      regs_27 <= 64'h0;
      regs_28 <= 64'h0;
      regs_29 <= 64'h0;
      regs_30 <= 64'h0;
      regs_31 <= 64'h0;
    end
    else begin
      if ((|io_rd) & io_rd == 5'h1)
        regs_1 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h2)
        regs_2 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h3)
        regs_3 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h4)
        regs_4 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h5)
        regs_5 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h6)
        regs_6 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h7)
        regs_7 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h8)
        regs_8 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h9)
        regs_9 <= io_wdata;
      if ((|io_rd) & io_rd == 5'hA)
        regs_10 <= io_wdata;
      if ((|io_rd) & io_rd == 5'hB)
        regs_11 <= io_wdata;
      if ((|io_rd) & io_rd == 5'hC)
        regs_12 <= io_wdata;
      if ((|io_rd) & io_rd == 5'hD)
        regs_13 <= io_wdata;
      if ((|io_rd) & io_rd == 5'hE)
        regs_14 <= io_wdata;
      if ((|io_rd) & io_rd == 5'hF)
        regs_15 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h10)
        regs_16 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h11)
        regs_17 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h12)
        regs_18 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h13)
        regs_19 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h14)
        regs_20 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h15)
        regs_21 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h16)
        regs_22 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h17)
        regs_23 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h18)
        regs_24 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h19)
        regs_25 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h1A)
        regs_26 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h1B)
        regs_27 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h1C)
        regs_28 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h1D)
        regs_29 <= io_wdata;
      if ((|io_rd) & io_rd == 5'h1E)
        regs_30 <= io_wdata;
      if ((|io_rd) & (&io_rd))
        regs_31 <= io_wdata;
    end
  end // always @(posedge)
  assign io_rs1_out = casez_tmp;
  assign io_rs2_out = casez_tmp_0;
endmodule

module ALU(
  input  [63:0] io_a,
  input  [63:0] io_b,
  input  [5:0]  io_func,
  output [63:0] io_res
);

  assign io_res = io_func == 6'h0 ? io_a + io_b : io_func == 6'h1 ? io_a - io_b : 64'h0;
endmodule

module Core(
  input         clock,
  input         reset,
  input  [31:0] io_inst,
  output [63:0] io_res
);

  wire [63:0] _alu_io_res;
  wire [63:0] _rf_io_rs1_out;
  wire [63:0] _rf_io_rs2_out;
  RegisterFile rf (
    .clock      (clock),
    .reset      (reset),
    .io_rs1     (io_inst[19:15]),
    .io_rs2     (io_inst[24:20]),
    .io_rs1_out (_rf_io_rs1_out),
    .io_rs2_out (_rf_io_rs2_out),
    .io_rd      (io_inst[11:7]),
    .io_wdata   (_alu_io_res)
  );
  ALU alu (
    .io_a    (_rf_io_rs1_out),
    .io_b
      (io_inst[6:0] == 7'h13 ? {{52{io_inst[31]}}, io_inst[31:20]} : _rf_io_rs2_out),
    .io_func ({2'h0, io_inst[31:28]}),
    .io_res  (_alu_io_res)
  );
  assign io_res = _alu_io_res;
endmodule


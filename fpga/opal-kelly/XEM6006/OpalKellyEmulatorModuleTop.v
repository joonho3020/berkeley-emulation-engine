// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module InstructionMemory(
  input        clock,
  input  [1:0] io_pc,
  input        io_wen,
  input  [2:0] io_winst_opcode,
  input  [7:0] io_winst_lut,
  input  [1:0] io_winst_ops_0_rs,
  input        io_winst_ops_0_local,
  input  [1:0] io_winst_ops_1_rs,
  input        io_winst_ops_1_local,
  input  [1:0] io_winst_ops_2_rs,
  input        io_winst_ops_2_local,
  input  [1:0] io_winst_sin,
  output [2:0] io_rinst_opcode,
  output [7:0] io_rinst_lut,
  output [1:0] io_rinst_ops_0_rs,
  output       io_rinst_ops_0_local,
  output [1:0] io_rinst_ops_1_rs,
  output       io_rinst_ops_1_local,
  output [1:0] io_rinst_ops_2_rs,
  output       io_rinst_ops_2_local,
  output [1:0] io_rinst_sin
);

  reg  [2:0] mem_0_opcode;
  reg  [7:0] mem_0_lut;
  reg  [1:0] mem_0_ops_0_rs;
  reg        mem_0_ops_0_local;
  reg  [1:0] mem_0_ops_1_rs;
  reg        mem_0_ops_1_local;
  reg  [1:0] mem_0_ops_2_rs;
  reg        mem_0_ops_2_local;
  reg  [1:0] mem_0_sin;
  reg  [2:0] mem_1_opcode;
  reg  [7:0] mem_1_lut;
  reg  [1:0] mem_1_ops_0_rs;
  reg        mem_1_ops_0_local;
  reg  [1:0] mem_1_ops_1_rs;
  reg        mem_1_ops_1_local;
  reg  [1:0] mem_1_ops_2_rs;
  reg        mem_1_ops_2_local;
  reg  [1:0] mem_1_sin;
  reg  [2:0] mem_2_opcode;
  reg  [7:0] mem_2_lut;
  reg  [1:0] mem_2_ops_0_rs;
  reg        mem_2_ops_0_local;
  reg  [1:0] mem_2_ops_1_rs;
  reg        mem_2_ops_1_local;
  reg  [1:0] mem_2_ops_2_rs;
  reg        mem_2_ops_2_local;
  reg  [1:0] mem_2_sin;
  reg  [2:0] mem_3_opcode;
  reg  [7:0] mem_3_lut;
  reg  [1:0] mem_3_ops_0_rs;
  reg        mem_3_ops_0_local;
  reg  [1:0] mem_3_ops_1_rs;
  reg        mem_3_ops_1_local;
  reg  [1:0] mem_3_ops_2_rs;
  reg        mem_3_ops_2_local;
  reg  [1:0] mem_3_sin;
  wire       _GEN = io_pc == 2'h1;
  wire       _GEN_0 = ~_GEN | io_wen;
  wire       _GEN_1 = io_pc == 2'h2;
  always @(posedge clock) begin
    if (io_pc == 2'h0 & io_wen) begin
      mem_0_opcode <= io_winst_opcode;
      mem_0_lut <= io_winst_lut;
      mem_0_ops_0_rs <= io_winst_ops_0_rs;
      mem_0_ops_0_local <= io_winst_ops_0_local;
      mem_0_ops_1_rs <= io_winst_ops_1_rs;
      mem_0_ops_1_local <= io_winst_ops_1_local;
      mem_0_ops_2_rs <= io_winst_ops_2_rs;
      mem_0_ops_2_local <= io_winst_ops_2_local;
      mem_0_sin <= io_winst_sin;
    end
    if (_GEN & io_wen) begin
      mem_1_opcode <= io_winst_opcode;
      mem_1_lut <= io_winst_lut;
      mem_1_ops_0_rs <= io_winst_ops_0_rs;
      mem_1_ops_0_local <= io_winst_ops_0_local;
      mem_1_ops_1_rs <= io_winst_ops_1_rs;
      mem_1_ops_1_local <= io_winst_ops_1_local;
      mem_1_ops_2_rs <= io_winst_ops_2_rs;
      mem_1_ops_2_local <= io_winst_ops_2_local;
      mem_1_sin <= io_winst_sin;
    end
    if (_GEN_1 & io_wen) begin
      mem_2_opcode <= io_winst_opcode;
      mem_2_lut <= io_winst_lut;
      mem_2_ops_0_rs <= io_winst_ops_0_rs;
      mem_2_ops_0_local <= io_winst_ops_0_local;
      mem_2_ops_1_rs <= io_winst_ops_1_rs;
      mem_2_ops_1_local <= io_winst_ops_1_local;
      mem_2_ops_2_rs <= io_winst_ops_2_rs;
      mem_2_ops_2_local <= io_winst_ops_2_local;
      mem_2_sin <= io_winst_sin;
    end
    if ((&io_pc) & io_wen) begin
      mem_3_opcode <= io_winst_opcode;
      mem_3_lut <= io_winst_lut;
      mem_3_ops_0_rs <= io_winst_ops_0_rs;
      mem_3_ops_0_local <= io_winst_ops_0_local;
      mem_3_ops_1_rs <= io_winst_ops_1_rs;
      mem_3_ops_1_local <= io_winst_ops_1_local;
      mem_3_ops_2_rs <= io_winst_ops_2_rs;
      mem_3_ops_2_local <= io_winst_ops_2_local;
      mem_3_sin <= io_winst_sin;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        mem_0_opcode = _RANDOM[2'h0][2:0];
        mem_0_lut = _RANDOM[2'h0][10:3];
        mem_0_ops_0_rs = _RANDOM[2'h0][12:11];
        mem_0_ops_0_local = _RANDOM[2'h0][13];
        mem_0_ops_1_rs = _RANDOM[2'h0][15:14];
        mem_0_ops_1_local = _RANDOM[2'h0][16];
        mem_0_ops_2_rs = _RANDOM[2'h0][18:17];
        mem_0_ops_2_local = _RANDOM[2'h0][19];
        mem_0_sin = _RANDOM[2'h0][21:20];
        mem_1_opcode = _RANDOM[2'h0][24:22];
        mem_1_lut = {_RANDOM[2'h0][31:25], _RANDOM[2'h1][0]};
        mem_1_ops_0_rs = _RANDOM[2'h1][2:1];
        mem_1_ops_0_local = _RANDOM[2'h1][3];
        mem_1_ops_1_rs = _RANDOM[2'h1][5:4];
        mem_1_ops_1_local = _RANDOM[2'h1][6];
        mem_1_ops_2_rs = _RANDOM[2'h1][8:7];
        mem_1_ops_2_local = _RANDOM[2'h1][9];
        mem_1_sin = _RANDOM[2'h1][11:10];
        mem_2_opcode = _RANDOM[2'h1][14:12];
        mem_2_lut = _RANDOM[2'h1][22:15];
        mem_2_ops_0_rs = _RANDOM[2'h1][24:23];
        mem_2_ops_0_local = _RANDOM[2'h1][25];
        mem_2_ops_1_rs = _RANDOM[2'h1][27:26];
        mem_2_ops_1_local = _RANDOM[2'h1][28];
        mem_2_ops_2_rs = _RANDOM[2'h1][30:29];
        mem_2_ops_2_local = _RANDOM[2'h1][31];
        mem_2_sin = _RANDOM[2'h2][1:0];
        mem_3_opcode = _RANDOM[2'h2][4:2];
        mem_3_lut = _RANDOM[2'h2][12:5];
        mem_3_ops_0_rs = _RANDOM[2'h2][14:13];
        mem_3_ops_0_local = _RANDOM[2'h2][15];
        mem_3_ops_1_rs = _RANDOM[2'h2][17:16];
        mem_3_ops_1_local = _RANDOM[2'h2][18];
        mem_3_ops_2_rs = _RANDOM[2'h2][20:19];
        mem_3_ops_2_local = _RANDOM[2'h2][21];
        mem_3_sin = _RANDOM[2'h2][23:22];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_rinst_opcode =
    (&io_pc)
      ? (io_wen ? mem_0_opcode : mem_3_opcode)
      : _GEN_1
          ? (io_wen ? mem_0_opcode : mem_2_opcode)
          : _GEN_0 ? mem_0_opcode : mem_1_opcode;
  assign io_rinst_lut =
    (&io_pc)
      ? (io_wen ? mem_0_lut : mem_3_lut)
      : _GEN_1 ? (io_wen ? mem_0_lut : mem_2_lut) : _GEN_0 ? mem_0_lut : mem_1_lut;
  assign io_rinst_ops_0_rs =
    (&io_pc)
      ? (io_wen ? mem_0_ops_0_rs : mem_3_ops_0_rs)
      : _GEN_1
          ? (io_wen ? mem_0_ops_0_rs : mem_2_ops_0_rs)
          : _GEN_0 ? mem_0_ops_0_rs : mem_1_ops_0_rs;
  assign io_rinst_ops_0_local =
    (&io_pc)
      ? (io_wen ? mem_0_ops_0_local : mem_3_ops_0_local)
      : _GEN_1
          ? (io_wen ? mem_0_ops_0_local : mem_2_ops_0_local)
          : _GEN_0 ? mem_0_ops_0_local : mem_1_ops_0_local;
  assign io_rinst_ops_1_rs =
    (&io_pc)
      ? (io_wen ? mem_0_ops_1_rs : mem_3_ops_1_rs)
      : _GEN_1
          ? (io_wen ? mem_0_ops_1_rs : mem_2_ops_1_rs)
          : _GEN_0 ? mem_0_ops_1_rs : mem_1_ops_1_rs;
  assign io_rinst_ops_1_local =
    (&io_pc)
      ? (io_wen ? mem_0_ops_1_local : mem_3_ops_1_local)
      : _GEN_1
          ? (io_wen ? mem_0_ops_1_local : mem_2_ops_1_local)
          : _GEN_0 ? mem_0_ops_1_local : mem_1_ops_1_local;
  assign io_rinst_ops_2_rs =
    (&io_pc)
      ? (io_wen ? mem_0_ops_2_rs : mem_3_ops_2_rs)
      : _GEN_1
          ? (io_wen ? mem_0_ops_2_rs : mem_2_ops_2_rs)
          : _GEN_0 ? mem_0_ops_2_rs : mem_1_ops_2_rs;
  assign io_rinst_ops_2_local =
    (&io_pc)
      ? (io_wen ? mem_0_ops_2_local : mem_3_ops_2_local)
      : _GEN_1
          ? (io_wen ? mem_0_ops_2_local : mem_2_ops_2_local)
          : _GEN_0 ? mem_0_ops_2_local : mem_1_ops_2_local;
  assign io_rinst_sin =
    (&io_pc)
      ? (io_wen ? mem_0_sin : mem_3_sin)
      : _GEN_1 ? (io_wen ? mem_0_sin : mem_2_sin) : _GEN_0 ? mem_0_sin : mem_1_sin;
endmodule

module DataMemory(
  input        clock,
  input        reset,
  input  [1:0] io_rd_0_idx,
  output       io_rd_0_bit,
  input  [1:0] io_rd_1_idx,
  output       io_rd_1_bit,
  input  [1:0] io_rd_2_idx,
  output       io_rd_2_bit,
  input  [1:0] io_wr_idx,
  input        io_wr_bit,
  output [3:0] io_dbg
);

  reg        mem_0;
  reg        mem_1;
  reg        mem_2;
  reg        mem_3;
  wire [3:0] dbg = {mem_3, mem_2, mem_1, mem_0};
  wire [3:0] _GEN = {{mem_3}, {mem_2}, {mem_1}, {io_rd_0_idx == 2'h0 & mem_0}};
  wire [3:0] _GEN_0 = {{mem_3}, {mem_2}, {mem_1}, {io_rd_1_idx == 2'h0 & mem_0}};
  wire [3:0] _GEN_1 = {{mem_3}, {mem_2}, {mem_1}, {io_rd_2_idx == 2'h0 & mem_0}};
  always @(posedge clock) begin
    if (reset) begin
      mem_0 <= 1'h0;
      mem_1 <= 1'h0;
      mem_2 <= 1'h0;
      mem_3 <= 1'h0;
    end
    else begin
      if (io_wr_idx == 2'h0)
        mem_0 <= io_wr_bit;
      if (io_wr_idx == 2'h1)
        mem_1 <= io_wr_bit;
      if (io_wr_idx == 2'h2)
        mem_2 <= io_wr_bit;
      if (&io_wr_idx)
        mem_3 <= io_wr_bit;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        mem_0 = _RANDOM[/*Zero width*/ 1'b0][0];
        mem_1 = _RANDOM[/*Zero width*/ 1'b0][1];
        mem_2 = _RANDOM[/*Zero width*/ 1'b0][2];
        mem_3 = _RANDOM[/*Zero width*/ 1'b0][3];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_rd_0_bit = _GEN[io_rd_0_idx];
  assign io_rd_1_bit = _GEN_0[io_rd_1_idx];
  assign io_rd_2_bit = _GEN_1[io_rd_2_idx];
  assign io_dbg = dbg;
endmodule

module Processor(
  input        clock,
  input        reset,
  input        io_run,
  input  [1:0] io_host_steps,
  output       io_init_o,
  output       io_inst_i_ready,
  input        io_inst_i_valid,
  input  [2:0] io_inst_i_bits_opcode,
  input  [7:0] io_inst_i_bits_lut,
  input  [1:0] io_inst_i_bits_ops_0_rs,
  input        io_inst_i_bits_ops_0_local,
  input  [1:0] io_inst_i_bits_ops_1_rs,
  input        io_inst_i_bits_ops_1_local,
  input  [1:0] io_inst_i_bits_ops_2_rs,
  input        io_inst_i_bits_ops_2_local,
  input  [1:0] io_inst_i_bits_sin,
  input        io_init_i,
  input        io_inst_o_ready,
  output       io_inst_o_valid,
  output [2:0] io_inst_o_bits_opcode,
  output [7:0] io_inst_o_bits_lut,
  output [1:0] io_inst_o_bits_ops_0_rs,
  output       io_inst_o_bits_ops_0_local,
  output [1:0] io_inst_o_bits_ops_1_rs,
  output       io_inst_o_bits_ops_1_local,
  output [1:0] io_inst_o_bits_ops_2_rs,
  output       io_inst_o_bits_ops_2_local,
  output [1:0] io_inst_o_bits_sin,
  output [1:0] io_swp_id,
  output       io_swp_o,
  input        io_swp_i,
  input        io_io_i,
  output       io_io_o,
  output [3:0] io_dbg_ldm,
  output [3:0] io_dbg_sdm,
  output       io_dbg_ops_0,
  output       io_dbg_ops_1,
  output       io_dbg_ops_2
);

  wire       _sdm_io_rd_0_bit;
  wire       _sdm_io_rd_1_bit;
  wire       _sdm_io_rd_2_bit;
  wire       _ldm_io_rd_0_bit;
  wire       _ldm_io_rd_1_bit;
  wire       _ldm_io_rd_2_bit;
  wire [2:0] _imem_io_rinst_opcode;
  wire [7:0] _imem_io_rinst_lut;
  wire [1:0] _imem_io_rinst_ops_0_rs;
  wire       _imem_io_rinst_ops_0_local;
  wire [1:0] _imem_io_rinst_ops_1_rs;
  wire       _imem_io_rinst_ops_1_local;
  wire [1:0] _imem_io_rinst_ops_2_rs;
  wire       _imem_io_rinst_ops_2_local;
  reg        io_o;
  reg  [1:0] pc;
  reg        init;
  wire       ops_0 = _imem_io_rinst_ops_0_local ? _ldm_io_rd_0_bit : _sdm_io_rd_0_bit;
  wire       ops_1 = _imem_io_rinst_ops_1_local ? _ldm_io_rd_1_bit : _sdm_io_rd_1_bit;
  wire       ops_2 = _imem_io_rinst_ops_2_local ? _ldm_io_rd_2_bit : _sdm_io_rd_2_bit;
  wire       _GEN = _imem_io_rinst_opcode == 3'h0;
  wire       _GEN_0 = _imem_io_rinst_opcode == 3'h1;
  wire       _GEN_1 = _imem_io_rinst_opcode == 3'h3;
  wire [7:0] _fout_T_1 = _imem_io_rinst_lut >> {5'h0, ops_2, ops_1, ops_0};
  wire       _GEN_2 = _imem_io_rinst_opcode == 3'h2;
  wire       io_swp_o_0 =
    io_run & ~_GEN
    & (_GEN_0
         ? io_io_i
         : _GEN_1
             ? _fout_T_1[0]
             : (_GEN_2 | _imem_io_rinst_opcode == 3'h4 | _imem_io_rinst_opcode == 3'h5)
               & ops_0);
  wire       _GEN_3 = pc == io_host_steps - 2'h1;
  always @(posedge clock) begin
    if (reset) begin
      io_o <= 1'h0;
      pc <= 2'h0;
      init <= 1'h0;
    end
    else begin
      if (_GEN | _GEN_0 | _GEN_1 | ~(_GEN_2 & init)) begin
      end
      else
        io_o <= ops_0;
      if (init) begin
        if (io_run) begin
          if (pc == io_host_steps - 2'h1)
            pc <= 2'h0;
          else
            pc <= pc + 2'h1;
        end
      end
      else if (io_init_i & io_inst_i_valid) begin
        if (_GEN_3)
          pc <= 2'h0;
        else
          pc <= pc + 2'h1;
      end
      init <= ~init & io_init_i & io_inst_i_valid & _GEN_3 | init;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        io_o = _RANDOM[/*Zero width*/ 1'b0][0];
        pc = _RANDOM[/*Zero width*/ 1'b0][2:1];
        init = _RANDOM[/*Zero width*/ 1'b0][3];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  InstructionMemory imem (
    .clock                (clock),
    .io_pc                (pc),
    .io_wen               (~init & io_init_i & io_inst_i_valid),
    .io_winst_opcode      (io_inst_i_bits_opcode),
    .io_winst_lut         (io_inst_i_bits_lut),
    .io_winst_ops_0_rs    (io_inst_i_bits_ops_0_rs),
    .io_winst_ops_0_local (io_inst_i_bits_ops_0_local),
    .io_winst_ops_1_rs    (io_inst_i_bits_ops_1_rs),
    .io_winst_ops_1_local (io_inst_i_bits_ops_1_local),
    .io_winst_ops_2_rs    (io_inst_i_bits_ops_2_rs),
    .io_winst_ops_2_local (io_inst_i_bits_ops_2_local),
    .io_winst_sin         (io_inst_i_bits_sin),
    .io_rinst_opcode      (_imem_io_rinst_opcode),
    .io_rinst_lut         (_imem_io_rinst_lut),
    .io_rinst_ops_0_rs    (_imem_io_rinst_ops_0_rs),
    .io_rinst_ops_0_local (_imem_io_rinst_ops_0_local),
    .io_rinst_ops_1_rs    (_imem_io_rinst_ops_1_rs),
    .io_rinst_ops_1_local (_imem_io_rinst_ops_1_local),
    .io_rinst_ops_2_rs    (_imem_io_rinst_ops_2_rs),
    .io_rinst_ops_2_local (_imem_io_rinst_ops_2_local),
    .io_rinst_sin         (io_swp_id)
  );
  DataMemory ldm (
    .clock       (clock),
    .reset       (reset),
    .io_rd_0_idx (_imem_io_rinst_ops_0_rs),
    .io_rd_0_bit (_ldm_io_rd_0_bit),
    .io_rd_1_idx (_imem_io_rinst_ops_1_rs),
    .io_rd_1_bit (_ldm_io_rd_1_bit),
    .io_rd_2_idx (_imem_io_rinst_ops_2_rs),
    .io_rd_2_bit (_ldm_io_rd_2_bit),
    .io_wr_idx   (pc),
    .io_wr_bit   (io_swp_o_0),
    .io_dbg      (io_dbg_ldm)
  );
  DataMemory sdm (
    .clock       (clock),
    .reset       (reset),
    .io_rd_0_idx (_imem_io_rinst_ops_0_rs),
    .io_rd_0_bit (_sdm_io_rd_0_bit),
    .io_rd_1_idx (_imem_io_rinst_ops_1_rs),
    .io_rd_1_bit (_sdm_io_rd_1_bit),
    .io_rd_2_idx (_imem_io_rinst_ops_2_rs),
    .io_rd_2_bit (_sdm_io_rd_2_bit),
    .io_wr_idx   (pc),
    .io_wr_bit   (io_run & io_swp_i),
    .io_dbg      (io_dbg_sdm)
  );
  assign io_init_o = init;
  assign io_inst_i_ready = ~init & (io_init_i | io_inst_o_ready);
  assign io_inst_o_valid = ~init & ~io_init_i & io_inst_i_valid;
  assign io_inst_o_bits_opcode = io_inst_i_bits_opcode;
  assign io_inst_o_bits_lut = io_inst_i_bits_lut;
  assign io_inst_o_bits_ops_0_rs = io_inst_i_bits_ops_0_rs;
  assign io_inst_o_bits_ops_0_local = io_inst_i_bits_ops_0_local;
  assign io_inst_o_bits_ops_1_rs = io_inst_i_bits_ops_1_rs;
  assign io_inst_o_bits_ops_1_local = io_inst_i_bits_ops_1_local;
  assign io_inst_o_bits_ops_2_rs = io_inst_i_bits_ops_2_rs;
  assign io_inst_o_bits_ops_2_local = io_inst_i_bits_ops_2_local;
  assign io_inst_o_bits_sin = io_inst_i_bits_sin;
  assign io_swp_o = io_swp_o_0;
  assign io_io_o = io_o;
  assign io_dbg_ops_0 = ops_0;
  assign io_dbg_ops_1 = ops_1;
  assign io_dbg_ops_2 = ops_2;
endmodule

module Switch(
  input  [1:0] io_ports_0_id,
  input        io_ports_0_o,
  output       io_ports_0_i,
  input  [1:0] io_ports_1_id,
  input        io_ports_1_o,
  output       io_ports_1_i,
  input  [1:0] io_ports_2_id,
  input        io_ports_2_o,
  output       io_ports_2_i,
  input  [1:0] io_ports_3_id,
  input        io_ports_3_o,
  output       io_ports_3_i
);

  wire [3:0] _GEN = {{io_ports_3_o}, {io_ports_2_o}, {io_ports_1_o}, {io_ports_0_o}};
  assign io_ports_0_i = _GEN[io_ports_0_id];
  assign io_ports_1_i = _GEN[io_ports_1_id];
  assign io_ports_2_i = _GEN[io_ports_2_id];
  assign io_ports_3_i = _GEN[io_ports_3_id];
endmodule

module EmulatorModule(
  input        clock,
  input        reset,
  input  [1:0] io_cfg_in_host_steps,
  input  [1:0] io_cfg_in_used_procs,
  input        io_run,
  output       io_init,
  output       io_inst_ready,
  input        io_inst_valid,
  input  [2:0] io_inst_bits_opcode,
  input  [7:0] io_inst_bits_lut,
  input  [1:0] io_inst_bits_ops_0_rs,
  input        io_inst_bits_ops_0_local,
  input  [1:0] io_inst_bits_ops_1_rs,
  input        io_inst_bits_ops_1_local,
  input  [1:0] io_inst_bits_ops_2_rs,
  input        io_inst_bits_ops_2_local,
  input  [1:0] io_inst_bits_sin,
  input        io_i_bits_0,
  input        io_i_bits_1,
  input        io_i_bits_2,
  input        io_i_bits_3,
  output       io_o_bits_0,
  output       io_o_bits_1,
  output       io_o_bits_2,
  output       io_o_bits_3,
  output [3:0] io_dbg_0_ldm,
  output [3:0] io_dbg_0_sdm,
  output       io_dbg_0_ops_0,
  output       io_dbg_0_ops_1,
  output       io_dbg_0_ops_2,
  output [3:0] io_dbg_1_ldm,
  output [3:0] io_dbg_1_sdm,
  output       io_dbg_1_ops_0,
  output       io_dbg_1_ops_1,
  output       io_dbg_1_ops_2,
  output [3:0] io_dbg_2_ldm,
  output [3:0] io_dbg_2_sdm,
  output       io_dbg_2_ops_0,
  output       io_dbg_2_ops_1,
  output       io_dbg_2_ops_2,
  output [3:0] io_dbg_3_ldm,
  output [3:0] io_dbg_3_sdm,
  output       io_dbg_3_ops_0,
  output       io_dbg_3_ops_1,
  output       io_dbg_3_ops_2
);

  wire       _switch_io_ports_0_i;
  wire       _switch_io_ports_1_i;
  wire       _switch_io_ports_2_i;
  wire       _switch_io_ports_3_i;
  wire       _procs_3_io_inst_o_valid;
  wire [2:0] _procs_3_io_inst_o_bits_opcode;
  wire [7:0] _procs_3_io_inst_o_bits_lut;
  wire [1:0] _procs_3_io_inst_o_bits_ops_0_rs;
  wire       _procs_3_io_inst_o_bits_ops_0_local;
  wire [1:0] _procs_3_io_inst_o_bits_ops_1_rs;
  wire       _procs_3_io_inst_o_bits_ops_1_local;
  wire [1:0] _procs_3_io_inst_o_bits_ops_2_rs;
  wire       _procs_3_io_inst_o_bits_ops_2_local;
  wire [1:0] _procs_3_io_inst_o_bits_sin;
  wire [1:0] _procs_3_io_swp_id;
  wire       _procs_3_io_swp_o;
  wire       _procs_2_io_init_o;
  wire       _procs_2_io_inst_i_ready;
  wire       _procs_2_io_inst_o_valid;
  wire [2:0] _procs_2_io_inst_o_bits_opcode;
  wire [7:0] _procs_2_io_inst_o_bits_lut;
  wire [1:0] _procs_2_io_inst_o_bits_ops_0_rs;
  wire       _procs_2_io_inst_o_bits_ops_0_local;
  wire [1:0] _procs_2_io_inst_o_bits_ops_1_rs;
  wire       _procs_2_io_inst_o_bits_ops_1_local;
  wire [1:0] _procs_2_io_inst_o_bits_ops_2_rs;
  wire       _procs_2_io_inst_o_bits_ops_2_local;
  wire [1:0] _procs_2_io_inst_o_bits_sin;
  wire [1:0] _procs_2_io_swp_id;
  wire       _procs_2_io_swp_o;
  wire       _procs_1_io_init_o;
  wire       _procs_1_io_inst_i_ready;
  wire       _procs_1_io_inst_o_valid;
  wire [2:0] _procs_1_io_inst_o_bits_opcode;
  wire [7:0] _procs_1_io_inst_o_bits_lut;
  wire [1:0] _procs_1_io_inst_o_bits_ops_0_rs;
  wire       _procs_1_io_inst_o_bits_ops_0_local;
  wire [1:0] _procs_1_io_inst_o_bits_ops_1_rs;
  wire       _procs_1_io_inst_o_bits_ops_1_local;
  wire [1:0] _procs_1_io_inst_o_bits_ops_2_rs;
  wire       _procs_1_io_inst_o_bits_ops_2_local;
  wire [1:0] _procs_1_io_inst_o_bits_sin;
  wire [1:0] _procs_1_io_swp_id;
  wire       _procs_1_io_swp_o;
  wire       _procs_0_io_init_o;
  wire       _procs_0_io_inst_i_ready;
  wire [1:0] _procs_0_io_swp_id;
  wire       _procs_0_io_swp_o;
  Processor procs_0 (
    .clock                      (clock),
    .reset                      (reset),
    .io_run                     (io_run),
    .io_host_steps              (io_cfg_in_host_steps),
    .io_init_o                  (_procs_0_io_init_o),
    .io_inst_i_ready            (_procs_0_io_inst_i_ready),
    .io_inst_i_valid            (_procs_1_io_inst_o_valid),
    .io_inst_i_bits_opcode      (_procs_1_io_inst_o_bits_opcode),
    .io_inst_i_bits_lut         (_procs_1_io_inst_o_bits_lut),
    .io_inst_i_bits_ops_0_rs    (_procs_1_io_inst_o_bits_ops_0_rs),
    .io_inst_i_bits_ops_0_local (_procs_1_io_inst_o_bits_ops_0_local),
    .io_inst_i_bits_ops_1_rs    (_procs_1_io_inst_o_bits_ops_1_rs),
    .io_inst_i_bits_ops_1_local (_procs_1_io_inst_o_bits_ops_1_local),
    .io_inst_i_bits_ops_2_rs    (_procs_1_io_inst_o_bits_ops_2_rs),
    .io_inst_i_bits_ops_2_local (_procs_1_io_inst_o_bits_ops_2_local),
    .io_inst_i_bits_sin         (_procs_1_io_inst_o_bits_sin),
    .io_init_i                  (1'h1),
    .io_inst_o_ready            (1'h0),
    .io_inst_o_valid            (/* unused */),
    .io_inst_o_bits_opcode      (/* unused */),
    .io_inst_o_bits_lut         (/* unused */),
    .io_inst_o_bits_ops_0_rs    (/* unused */),
    .io_inst_o_bits_ops_0_local (/* unused */),
    .io_inst_o_bits_ops_1_rs    (/* unused */),
    .io_inst_o_bits_ops_1_local (/* unused */),
    .io_inst_o_bits_ops_2_rs    (/* unused */),
    .io_inst_o_bits_ops_2_local (/* unused */),
    .io_inst_o_bits_sin         (/* unused */),
    .io_swp_id                  (_procs_0_io_swp_id),
    .io_swp_o                   (_procs_0_io_swp_o),
    .io_swp_i                   (_switch_io_ports_0_i),
    .io_io_i                    (io_i_bits_0),
    .io_io_o                    (io_o_bits_0),
    .io_dbg_ldm                 (io_dbg_0_ldm),
    .io_dbg_sdm                 (io_dbg_0_sdm),
    .io_dbg_ops_0               (io_dbg_0_ops_0),
    .io_dbg_ops_1               (io_dbg_0_ops_1),
    .io_dbg_ops_2               (io_dbg_0_ops_2)
  );
  Processor procs_1 (
    .clock                      (clock),
    .reset                      (reset),
    .io_run                     (io_run),
    .io_host_steps              (io_cfg_in_host_steps),
    .io_init_o                  (_procs_1_io_init_o),
    .io_inst_i_ready            (_procs_1_io_inst_i_ready),
    .io_inst_i_valid            (_procs_2_io_inst_o_valid),
    .io_inst_i_bits_opcode      (_procs_2_io_inst_o_bits_opcode),
    .io_inst_i_bits_lut         (_procs_2_io_inst_o_bits_lut),
    .io_inst_i_bits_ops_0_rs    (_procs_2_io_inst_o_bits_ops_0_rs),
    .io_inst_i_bits_ops_0_local (_procs_2_io_inst_o_bits_ops_0_local),
    .io_inst_i_bits_ops_1_rs    (_procs_2_io_inst_o_bits_ops_1_rs),
    .io_inst_i_bits_ops_1_local (_procs_2_io_inst_o_bits_ops_1_local),
    .io_inst_i_bits_ops_2_rs    (_procs_2_io_inst_o_bits_ops_2_rs),
    .io_inst_i_bits_ops_2_local (_procs_2_io_inst_o_bits_ops_2_local),
    .io_inst_i_bits_sin         (_procs_2_io_inst_o_bits_sin),
    .io_init_i                  (_procs_0_io_init_o),
    .io_inst_o_ready            (_procs_0_io_inst_i_ready),
    .io_inst_o_valid            (_procs_1_io_inst_o_valid),
    .io_inst_o_bits_opcode      (_procs_1_io_inst_o_bits_opcode),
    .io_inst_o_bits_lut         (_procs_1_io_inst_o_bits_lut),
    .io_inst_o_bits_ops_0_rs    (_procs_1_io_inst_o_bits_ops_0_rs),
    .io_inst_o_bits_ops_0_local (_procs_1_io_inst_o_bits_ops_0_local),
    .io_inst_o_bits_ops_1_rs    (_procs_1_io_inst_o_bits_ops_1_rs),
    .io_inst_o_bits_ops_1_local (_procs_1_io_inst_o_bits_ops_1_local),
    .io_inst_o_bits_ops_2_rs    (_procs_1_io_inst_o_bits_ops_2_rs),
    .io_inst_o_bits_ops_2_local (_procs_1_io_inst_o_bits_ops_2_local),
    .io_inst_o_bits_sin         (_procs_1_io_inst_o_bits_sin),
    .io_swp_id                  (_procs_1_io_swp_id),
    .io_swp_o                   (_procs_1_io_swp_o),
    .io_swp_i                   (_switch_io_ports_1_i),
    .io_io_i                    (io_i_bits_1),
    .io_io_o                    (io_o_bits_1),
    .io_dbg_ldm                 (io_dbg_1_ldm),
    .io_dbg_sdm                 (io_dbg_1_sdm),
    .io_dbg_ops_0               (io_dbg_1_ops_0),
    .io_dbg_ops_1               (io_dbg_1_ops_1),
    .io_dbg_ops_2               (io_dbg_1_ops_2)
  );
  Processor procs_2 (
    .clock                      (clock),
    .reset                      (reset),
    .io_run                     (io_run),
    .io_host_steps              (io_cfg_in_host_steps),
    .io_init_o                  (_procs_2_io_init_o),
    .io_inst_i_ready            (_procs_2_io_inst_i_ready),
    .io_inst_i_valid            (_procs_3_io_inst_o_valid),
    .io_inst_i_bits_opcode      (_procs_3_io_inst_o_bits_opcode),
    .io_inst_i_bits_lut         (_procs_3_io_inst_o_bits_lut),
    .io_inst_i_bits_ops_0_rs    (_procs_3_io_inst_o_bits_ops_0_rs),
    .io_inst_i_bits_ops_0_local (_procs_3_io_inst_o_bits_ops_0_local),
    .io_inst_i_bits_ops_1_rs    (_procs_3_io_inst_o_bits_ops_1_rs),
    .io_inst_i_bits_ops_1_local (_procs_3_io_inst_o_bits_ops_1_local),
    .io_inst_i_bits_ops_2_rs    (_procs_3_io_inst_o_bits_ops_2_rs),
    .io_inst_i_bits_ops_2_local (_procs_3_io_inst_o_bits_ops_2_local),
    .io_inst_i_bits_sin         (_procs_3_io_inst_o_bits_sin),
    .io_init_i                  (_procs_1_io_init_o),
    .io_inst_o_ready            (_procs_1_io_inst_i_ready),
    .io_inst_o_valid            (_procs_2_io_inst_o_valid),
    .io_inst_o_bits_opcode      (_procs_2_io_inst_o_bits_opcode),
    .io_inst_o_bits_lut         (_procs_2_io_inst_o_bits_lut),
    .io_inst_o_bits_ops_0_rs    (_procs_2_io_inst_o_bits_ops_0_rs),
    .io_inst_o_bits_ops_0_local (_procs_2_io_inst_o_bits_ops_0_local),
    .io_inst_o_bits_ops_1_rs    (_procs_2_io_inst_o_bits_ops_1_rs),
    .io_inst_o_bits_ops_1_local (_procs_2_io_inst_o_bits_ops_1_local),
    .io_inst_o_bits_ops_2_rs    (_procs_2_io_inst_o_bits_ops_2_rs),
    .io_inst_o_bits_ops_2_local (_procs_2_io_inst_o_bits_ops_2_local),
    .io_inst_o_bits_sin         (_procs_2_io_inst_o_bits_sin),
    .io_swp_id                  (_procs_2_io_swp_id),
    .io_swp_o                   (_procs_2_io_swp_o),
    .io_swp_i                   (_switch_io_ports_2_i),
    .io_io_i                    (io_i_bits_2),
    .io_io_o                    (io_o_bits_2),
    .io_dbg_ldm                 (io_dbg_2_ldm),
    .io_dbg_sdm                 (io_dbg_2_sdm),
    .io_dbg_ops_0               (io_dbg_2_ops_0),
    .io_dbg_ops_1               (io_dbg_2_ops_1),
    .io_dbg_ops_2               (io_dbg_2_ops_2)
  );
  Processor procs_3 (
    .clock                      (clock),
    .reset                      (reset),
    .io_run                     (io_run),
    .io_host_steps              (io_cfg_in_host_steps),
    .io_init_o                  (/* unused */),
    .io_inst_i_ready            (io_inst_ready),
    .io_inst_i_valid            (io_inst_valid),
    .io_inst_i_bits_opcode      (io_inst_bits_opcode),
    .io_inst_i_bits_lut         (io_inst_bits_lut),
    .io_inst_i_bits_ops_0_rs    (io_inst_bits_ops_0_rs),
    .io_inst_i_bits_ops_0_local (io_inst_bits_ops_0_local),
    .io_inst_i_bits_ops_1_rs    (io_inst_bits_ops_1_rs),
    .io_inst_i_bits_ops_1_local (io_inst_bits_ops_1_local),
    .io_inst_i_bits_ops_2_rs    (io_inst_bits_ops_2_rs),
    .io_inst_i_bits_ops_2_local (io_inst_bits_ops_2_local),
    .io_inst_i_bits_sin         (io_inst_bits_sin),
    .io_init_i                  (_procs_2_io_init_o),
    .io_inst_o_ready            (_procs_2_io_inst_i_ready),
    .io_inst_o_valid            (_procs_3_io_inst_o_valid),
    .io_inst_o_bits_opcode      (_procs_3_io_inst_o_bits_opcode),
    .io_inst_o_bits_lut         (_procs_3_io_inst_o_bits_lut),
    .io_inst_o_bits_ops_0_rs    (_procs_3_io_inst_o_bits_ops_0_rs),
    .io_inst_o_bits_ops_0_local (_procs_3_io_inst_o_bits_ops_0_local),
    .io_inst_o_bits_ops_1_rs    (_procs_3_io_inst_o_bits_ops_1_rs),
    .io_inst_o_bits_ops_1_local (_procs_3_io_inst_o_bits_ops_1_local),
    .io_inst_o_bits_ops_2_rs    (_procs_3_io_inst_o_bits_ops_2_rs),
    .io_inst_o_bits_ops_2_local (_procs_3_io_inst_o_bits_ops_2_local),
    .io_inst_o_bits_sin         (_procs_3_io_inst_o_bits_sin),
    .io_swp_id                  (_procs_3_io_swp_id),
    .io_swp_o                   (_procs_3_io_swp_o),
    .io_swp_i                   (_switch_io_ports_3_i),
    .io_io_i                    (io_i_bits_3),
    .io_io_o                    (io_o_bits_3),
    .io_dbg_ldm                 (io_dbg_3_ldm),
    .io_dbg_sdm                 (io_dbg_3_sdm),
    .io_dbg_ops_0               (io_dbg_3_ops_0),
    .io_dbg_ops_1               (io_dbg_3_ops_1),
    .io_dbg_ops_2               (io_dbg_3_ops_2)
  );
  Switch switch (
    .io_ports_0_id (_procs_0_io_swp_id),
    .io_ports_0_o  (_procs_0_io_swp_o),
    .io_ports_0_i  (_switch_io_ports_0_i),
    .io_ports_1_id (_procs_1_io_swp_id),
    .io_ports_1_o  (_procs_1_io_swp_o),
    .io_ports_1_i  (_switch_io_ports_1_i),
    .io_ports_2_id (_procs_2_io_swp_id),
    .io_ports_2_o  (_procs_2_io_swp_o),
    .io_ports_2_i  (_switch_io_ports_2_i),
    .io_ports_3_id (_procs_3_io_swp_id),
    .io_ports_3_o  (_procs_3_io_swp_o),
    .io_ports_3_i  (_switch_io_ports_3_i)
  );
  assign io_init =
    (io_cfg_in_used_procs == 2'h0 | _procs_0_io_init_o)
    & (~(io_cfg_in_used_procs[1]) | _procs_1_io_init_o)
    & (io_cfg_in_used_procs != 2'h3 | _procs_2_io_init_o);
endmodule

// VCS coverage exclude_file
module ram_2x32(
  input         R0_addr,
  input         R0_en,
  input         R0_clk,
  output [31:0] R0_data,
  input         W0_addr,
  input         W0_en,
  input         W0_clk,
  input  [31:0] W0_data
);

  reg [31:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_
    reg [31:0] _RANDOM_MEM;
    initial begin
      `INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_MEM_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM_MEM = `RANDOM;
          Memory[i[0]] = _RANDOM_MEM;
        end
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;
endmodule

module Queue2_Vec2_UInt16(
  input         clock,
  input         reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [15:0] io_enq_bits_0,
  input  [15:0] io_enq_bits_1,
  input         io_deq_ready,
  output        io_deq_valid,
  output [15:0] io_deq_bits_0,
  output [15:0] io_deq_bits_1
);

  wire [31:0] _ram_ext_R0_data;
  reg         wrap;
  reg         wrap_1;
  reg         maybe_full;
  wire        ptr_match = wrap == wrap_1;
  wire        empty = ptr_match & ~maybe_full;
  wire        full = ptr_match & maybe_full;
  wire        do_enq = ~full & io_enq_valid;
  wire        do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (~(do_enq == do_deq))
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        wrap = _RANDOM[/*Zero width*/ 1'b0][0];
        wrap_1 = _RANDOM[/*Zero width*/ 1'b0][1];
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][2];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_2x32 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data ({io_enq_bits_1, io_enq_bits_0})
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_0 = _ram_ext_R0_data[15:0];
  assign io_deq_bits_1 = _ram_ext_R0_data[31:16];
endmodule

// VCS coverage exclude_file
module ram_0_2x16(
  input         R0_addr,
  input         R0_en,
  input         R0_clk,
  output [15:0] R0_data,
  input         W0_addr,
  input         W0_en,
  input         W0_clk,
  input  [15:0] W0_data
);

  reg [15:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_
    reg [31:0] _RANDOM_MEM;
    initial begin
      `INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_MEM_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM_MEM = `RANDOM;
          Memory[i[0]] = _RANDOM_MEM[15:0];
        end
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 16'bx;
endmodule

module Queue2_Vec1_UInt16(
  input         clock,
  input         reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [15:0] io_enq_bits_0,
  input         io_deq_ready,
  output        io_deq_valid,
  output [15:0] io_deq_bits_0
);

  reg  wrap;
  reg  wrap_1;
  reg  maybe_full;
  wire ptr_match = wrap == wrap_1;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        wrap <= wrap - 1'h1;
      if (do_deq)
        wrap_1 <= wrap_1 - 1'h1;
      if (~(do_enq == do_deq))
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        wrap = _RANDOM[/*Zero width*/ 1'b0][0];
        wrap_1 = _RANDOM[/*Zero width*/ 1'b0][1];
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][2];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_0_2x16 ram_0_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (io_deq_bits_0),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_0)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module OpalKellyEmulatorModuleTop(
  input         clock,
  input         reset,
  input  [15:0] io_host_steps,
  input  [1:0]  io_used_procs,
  output        io_insns_ready,
  input         io_insns_valid,
  input  [15:0] io_insns_bits_0,
  input  [15:0] io_insns_bits_1,
  output        io_io_i_ready,
  input         io_io_i_valid,
  input  [15:0] io_io_i_bits_0,
  input         io_io_o_ready,
  output        io_io_o_valid,
  output [15:0] io_io_o_bits_0
);

  wire        _io_o_q_io_enq_ready;
  wire        _io_i_q_io_deq_valid;
  wire [15:0] _io_i_q_io_deq_bits_0;
  wire        _insns_q_io_deq_valid;
  wire [15:0] _insns_q_io_deq_bits_0;
  wire [15:0] _insns_q_io_deq_bits_1;
  wire        _module_io_init;
  wire        _module_io_inst_ready;
  wire        _module_io_o_bits_0;
  wire        _module_io_o_bits_1;
  wire        _module_io_o_bits_2;
  wire        _module_io_o_bits_3;
  reg         insns_val_prev;
  reg         io_i_prev;
  reg  [1:0]  step;
  wire        _GEN = _io_i_q_io_deq_valid & _io_o_q_io_enq_ready & _module_io_init;
  wire        _GEN_0 = {14'h0, step} == io_host_steps - 16'h1;
  wire        _GEN_1 = _GEN & _GEN_0;
  always @(posedge clock) begin
    insns_val_prev <= io_insns_valid;
    io_i_prev <= io_io_i_valid;
    if (reset)
      step <= 2'h0;
    else if (_GEN) begin
      if (_GEN_0)
        step <= 2'h0;
      else
        step <= step + 2'h1;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        insns_val_prev = _RANDOM[/*Zero width*/ 1'b0][0];
        io_i_prev = _RANDOM[/*Zero width*/ 1'b0][1];
        step = _RANDOM[/*Zero width*/ 1'b0][3:2];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  EmulatorModule module_0 (
    .clock                    (clock),
    .reset                    (reset),
    .io_cfg_in_host_steps     (io_host_steps[1:0]),
    .io_cfg_in_used_procs     (io_used_procs),
    .io_run                   (_GEN),
    .io_init                  (_module_io_init),
    .io_inst_ready            (_module_io_inst_ready),
    .io_inst_valid            (_insns_q_io_deq_valid),
    .io_inst_bits_opcode      (_insns_q_io_deq_bits_0[2:0]),
    .io_inst_bits_lut         (_insns_q_io_deq_bits_0[10:3]),
    .io_inst_bits_ops_0_rs    (_insns_q_io_deq_bits_0[12:11]),
    .io_inst_bits_ops_0_local (_insns_q_io_deq_bits_0[13]),
    .io_inst_bits_ops_1_rs    (_insns_q_io_deq_bits_0[15:14]),
    .io_inst_bits_ops_1_local (_insns_q_io_deq_bits_1[0]),
    .io_inst_bits_ops_2_rs    (_insns_q_io_deq_bits_1[2:1]),
    .io_inst_bits_ops_2_local (_insns_q_io_deq_bits_1[3]),
    .io_inst_bits_sin         (_insns_q_io_deq_bits_1[5:4]),
    .io_i_bits_0              (_io_i_q_io_deq_bits_0[0]),
    .io_i_bits_1              (_io_i_q_io_deq_bits_0[1]),
    .io_i_bits_2              (_io_i_q_io_deq_bits_0[2]),
    .io_i_bits_3              (_io_i_q_io_deq_bits_0[3]),
    .io_o_bits_0              (_module_io_o_bits_0),
    .io_o_bits_1              (_module_io_o_bits_1),
    .io_o_bits_2              (_module_io_o_bits_2),
    .io_o_bits_3              (_module_io_o_bits_3),
    .io_dbg_0_ldm             (/* unused */),
    .io_dbg_0_sdm             (/* unused */),
    .io_dbg_0_ops_0           (/* unused */),
    .io_dbg_0_ops_1           (/* unused */),
    .io_dbg_0_ops_2           (/* unused */),
    .io_dbg_1_ldm             (/* unused */),
    .io_dbg_1_sdm             (/* unused */),
    .io_dbg_1_ops_0           (/* unused */),
    .io_dbg_1_ops_1           (/* unused */),
    .io_dbg_1_ops_2           (/* unused */),
    .io_dbg_2_ldm             (/* unused */),
    .io_dbg_2_sdm             (/* unused */),
    .io_dbg_2_ops_0           (/* unused */),
    .io_dbg_2_ops_1           (/* unused */),
    .io_dbg_2_ops_2           (/* unused */),
    .io_dbg_3_ldm             (/* unused */),
    .io_dbg_3_sdm             (/* unused */),
    .io_dbg_3_ops_0           (/* unused */),
    .io_dbg_3_ops_1           (/* unused */),
    .io_dbg_3_ops_2           (/* unused */)
  );
  Queue2_Vec2_UInt16 insns_q (
    .clock         (clock),
    .reset         (reset),
    .io_enq_ready  (io_insns_ready),
    .io_enq_valid  (~insns_val_prev & io_insns_valid),
    .io_enq_bits_0 (io_insns_bits_0),
    .io_enq_bits_1 (io_insns_bits_1),
    .io_deq_ready  (_module_io_inst_ready),
    .io_deq_valid  (_insns_q_io_deq_valid),
    .io_deq_bits_0 (_insns_q_io_deq_bits_0),
    .io_deq_bits_1 (_insns_q_io_deq_bits_1)
  );
  Queue2_Vec1_UInt16 io_i_q (
    .clock         (clock),
    .reset         (reset),
    .io_enq_ready  (io_io_i_ready),
    .io_enq_valid  (~io_i_prev & io_io_i_valid),
    .io_enq_bits_0 (io_io_i_bits_0),
    .io_deq_ready  (_GEN_1),
    .io_deq_valid  (_io_i_q_io_deq_valid),
    .io_deq_bits_0 (_io_i_q_io_deq_bits_0)
  );
  Queue2_Vec1_UInt16 io_o_q (
    .clock         (clock),
    .reset         (reset),
    .io_enq_ready  (_io_o_q_io_enq_ready),
    .io_enq_valid  (_GEN_1),
    .io_enq_bits_0
      ({12'h0,
        _module_io_o_bits_3,
        _module_io_o_bits_2,
        _module_io_o_bits_1,
        _module_io_o_bits_0}),
    .io_deq_ready  (io_io_o_ready),
    .io_deq_valid  (io_io_o_valid),
    .io_deq_bits_0 (io_io_o_bits_0)
  );
endmodule

